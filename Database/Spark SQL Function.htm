<!DOCTYPE html>
<!-- saved from url=(0065)https://spark.apache.org/docs/latest/api/sql/index.html#isnotnull -->
<html class=" js flexbox flexboxlegacy canvas canvastext webgl no-touch geolocation postmessage websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths" lang="en"><!--<![endif]--><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta name="description" content="None">
  
  <link rel="shortcut icon" href="https://spark.apache.org/docs/latest/api/sql/img/favicon.ico">
  <title>Functions - Spark SQL, Built-in Functions</title>
  <link href="./Functions - Spark SQL, Built-in Functions_files/css" rel="stylesheet" type="text/css">

  <link rel="stylesheet" href="./Functions - Spark SQL, Built-in Functions_files/theme.css" type="text/css">
  <link rel="stylesheet" href="./Functions - Spark SQL, Built-in Functions_files/theme_extra.css" type="text/css">
  <link rel="stylesheet" href="./Functions - Spark SQL, Built-in Functions_files/github.min.css">
  
  <script>
    // Current page data
    var mkdocs_page_name = "Functions";
    var mkdocs_page_input_path = "index.md";
    var mkdocs_page_url = null;
  </script>
  
  <script src="./Functions - Spark SQL, Built-in Functions_files/jquery-2.1.1.min.js" defer=""></script>
  <script src="./Functions - Spark SQL, Built-in Functions_files/modernizr-2.8.3.min.js" defer=""></script>
  <script src="./Functions - Spark SQL, Built-in Functions_files/highlight.min.js"></script>
  <script>hljs.initHighlightingOnLoad();</script> 
  
</head>

<body class="wy-body-for-nav" role="document" data-gr-c-s-loaded="true">

  <div class="wy-grid-for-nav">

    
    <nav data-toggle="wy-nav-shift" class="wy-nav-side stickynav">
      <div class="wy-side-nav-search">
        <a href="https://spark.apache.org/docs/latest/api/sql/" class="icon icon-home"> Spark SQL, Built-in Functions</a>
        <div role="search">
  <form id="rtd-search-form" class="wy-form" action="https://spark.apache.org/docs/latest/api/sql/search.html" method="get">
    <input type="text" name="q" placeholder="Search docs" title="Type search term here">
  </form>
</div>
      </div>

      <div class="wy-menu wy-menu-vertical" data-spy="affix" role="navigation" aria-label="main navigation">
	<ul class="current">
	  
          
            <li class="toctree-l1 current">
		
    <a class="current" href="https://spark.apache.org/docs/latest/api/sql/">Functions</a>
    <ul class="subnav">
            
    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#_1">!</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#_2">%</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#_3">&amp;</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#_4">*</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#_5">+</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#-">-</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#_6">/</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#_7">&lt;</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#_8">&lt;=</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#_9">&lt;=&gt;</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#_10">=</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#_11">==</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#_12">&gt;</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#_13">&gt;=</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#_14">^</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#abs">abs</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#acos">acos</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#acosh">acosh</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#add_months">add_months</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#aggregate">aggregate</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#and">and</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#any">any</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#approx_count_distinct">approx_count_distinct</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#approx_percentile">approx_percentile</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#array">array</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#array_contains">array_contains</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#array_distinct">array_distinct</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#array_except">array_except</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#array_intersect">array_intersect</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#array_join">array_join</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#array_max">array_max</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#array_min">array_min</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#array_position">array_position</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#array_remove">array_remove</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#array_repeat">array_repeat</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#array_sort">array_sort</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#array_union">array_union</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#arrays_overlap">arrays_overlap</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#arrays_zip">arrays_zip</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#ascii">ascii</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#asin">asin</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#asinh">asinh</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#assert_true">assert_true</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#atan">atan</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#atan2">atan2</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#atanh">atanh</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#avg">avg</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#base64">base64</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#bigint">bigint</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#bin">bin</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#binary">binary</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#bit_and">bit_and</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#bit_count">bit_count</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#bit_length">bit_length</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#bit_or">bit_or</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#bit_xor">bit_xor</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#bool_and">bool_and</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#bool_or">bool_or</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#boolean">boolean</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#bround">bround</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#cardinality">cardinality</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#cast">cast</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#cbrt">cbrt</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#ceil">ceil</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#ceiling">ceiling</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#char">char</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#char_length">char_length</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#character_length">character_length</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#chr">chr</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#coalesce">coalesce</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#collect_list">collect_list</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#collect_set">collect_set</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#concat">concat</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#concat_ws">concat_ws</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#conv">conv</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#corr">corr</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#cos">cos</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#cosh">cosh</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#cot">cot</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#count">count</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#count_if">count_if</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#count_min_sketch">count_min_sketch</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#covar_pop">covar_pop</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#covar_samp">covar_samp</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#crc32">crc32</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#cube">cube</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#cume_dist">cume_dist</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#current_database">current_database</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#current_date">current_date</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#current_timestamp">current_timestamp</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#date">date</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#date_add">date_add</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#date_format">date_format</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#date_part">date_part</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#date_sub">date_sub</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#date_trunc">date_trunc</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#datediff">datediff</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#day">day</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#dayofmonth">dayofmonth</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#dayofweek">dayofweek</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#dayofyear">dayofyear</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#decimal">decimal</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#decode">decode</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#degrees">degrees</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#dense_rank">dense_rank</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#div">div</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#double">double</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#e">e</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#element_at">element_at</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#elt">elt</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#encode">encode</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#every">every</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#exists">exists</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#exp">exp</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#explode">explode</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#explode_outer">explode_outer</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#expm1">expm1</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#extract">extract</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#factorial">factorial</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#filter">filter</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#find_in_set">find_in_set</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#first">first</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#first_value">first_value</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#flatten">flatten</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#float">float</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#floor">floor</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#forall">forall</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#format_number">format_number</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#format_string">format_string</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#from_csv">from_csv</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#from_json">from_json</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#from_unixtime">from_unixtime</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#from_utc_timestamp">from_utc_timestamp</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#get_json_object">get_json_object</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#greatest">greatest</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#grouping">grouping</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#grouping_id">grouping_id</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#hash">hash</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#hex">hex</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#hour">hour</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#hypot">hypot</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#if">if</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#ifnull">ifnull</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#in">in</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#initcap">initcap</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#inline">inline</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#inline_outer">inline_outer</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#input_file_block_length">input_file_block_length</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#input_file_block_start">input_file_block_start</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#input_file_name">input_file_name</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#instr">instr</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#int">int</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#isnan">isnan</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#isnotnull">isnotnull</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#isnull">isnull</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#java_method">java_method</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#json_tuple">json_tuple</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#kurtosis">kurtosis</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#lag">lag</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#last">last</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#last_day">last_day</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#last_value">last_value</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#lcase">lcase</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#lead">lead</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#least">least</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#left">left</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#length">length</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#levenshtein">levenshtein</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#like">like</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#ln">ln</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#locate">locate</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#log">log</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#log10">log10</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#log1p">log1p</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#log2">log2</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#lower">lower</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#lpad">lpad</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#ltrim">ltrim</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#make_date">make_date</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#make_interval">make_interval</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#make_timestamp">make_timestamp</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#map">map</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#map_concat">map_concat</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#map_entries">map_entries</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#map_filter">map_filter</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#map_from_arrays">map_from_arrays</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#map_from_entries">map_from_entries</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#map_keys">map_keys</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#map_values">map_values</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#map_zip_with">map_zip_with</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#max">max</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#max_by">max_by</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#md5">md5</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#mean">mean</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#min">min</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#min_by">min_by</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#minute">minute</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#mod">mod</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#monotonically_increasing_id">monotonically_increasing_id</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#month">month</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#months_between">months_between</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#named_struct">named_struct</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#nanvl">nanvl</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#negative">negative</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#next_day">next_day</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#not">not</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#now">now</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#ntile">ntile</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#nullif">nullif</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#nvl">nvl</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#nvl2">nvl2</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#octet_length">octet_length</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#or">or</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#overlay">overlay</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#parse_url">parse_url</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#percent_rank">percent_rank</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#percentile">percentile</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#percentile_approx">percentile_approx</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#pi">pi</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#pmod">pmod</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#posexplode">posexplode</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#posexplode_outer">posexplode_outer</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#position">position</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#positive">positive</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#pow">pow</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#power">power</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#printf">printf</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#quarter">quarter</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#radians">radians</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#rand">rand</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#randn">randn</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#random">random</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#rank">rank</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#reflect">reflect</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#regexp_extract">regexp_extract</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#regexp_replace">regexp_replace</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#repeat">repeat</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#replace">replace</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#reverse">reverse</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#right">right</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#rint">rint</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#rlike">rlike</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#rollup">rollup</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#round">round</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#row_number">row_number</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#rpad">rpad</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#rtrim">rtrim</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#schema_of_csv">schema_of_csv</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#schema_of_json">schema_of_json</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#second">second</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#sentences">sentences</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#sequence">sequence</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#sha">sha</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#sha1">sha1</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#sha2">sha2</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#shiftleft">shiftleft</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#shiftright">shiftright</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#shiftrightunsigned">shiftrightunsigned</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#shuffle">shuffle</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#sign">sign</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#signum">signum</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#sin">sin</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#sinh">sinh</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#size">size</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#skewness">skewness</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#slice">slice</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#smallint">smallint</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#some">some</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#sort_array">sort_array</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#soundex">soundex</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#space">space</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#spark_partition_id">spark_partition_id</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#split">split</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#sqrt">sqrt</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#stack">stack</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#std">std</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#stddev">stddev</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#stddev_pop">stddev_pop</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#stddev_samp">stddev_samp</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#str_to_map">str_to_map</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#string">string</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#struct">struct</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#substr">substr</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#substring">substring</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#substring_index">substring_index</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#sum">sum</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#tan">tan</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#tanh">tanh</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#timestamp">timestamp</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#tinyint">tinyint</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#to_csv">to_csv</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#to_date">to_date</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#to_json">to_json</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#to_timestamp">to_timestamp</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#to_unix_timestamp">to_unix_timestamp</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#to_utc_timestamp">to_utc_timestamp</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#transform">transform</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#transform_keys">transform_keys</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#transform_values">transform_values</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#translate">translate</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#trim">trim</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#trunc">trunc</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#typeof">typeof</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#ucase">ucase</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#unbase64">unbase64</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#unhex">unhex</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#unix_timestamp">unix_timestamp</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#upper">upper</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#uuid">uuid</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#var_pop">var_pop</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#var_samp">var_samp</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#variance">variance</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#version">version</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#weekday">weekday</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#weekofyear">weekofyear</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#when">when</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#window">window</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#xpath">xpath</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#xpath_boolean">xpath_boolean</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#xpath_double">xpath_double</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#xpath_float">xpath_float</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#xpath_int">xpath_int</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#xpath_long">xpath_long</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#xpath_number">xpath_number</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#xpath_short">xpath_short</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#xpath_string">xpath_string</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#xxhash64">xxhash64</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#year">year</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#zip_with">zip_with</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#_15">|</a></li>
    

    <li class="toctree-l2"><a href="https://spark.apache.org/docs/latest/api/sql/index.html#_16">~</a></li>
    

    </ul>
	    </li>
          
        </ul>
      </div>
      &nbsp;
    </nav>

    <section data-toggle="wy-nav-shift" class="wy-nav-content-wrap">

      
      <nav class="wy-nav-top" role="navigation" aria-label="top navigation">
        <i data-toggle="wy-nav-top" class="fa fa-bars"></i>
        <a href="https://spark.apache.org/docs/latest/api/sql/">Spark SQL, Built-in Functions</a>
      </nav>

      
      <div class="wy-nav-content">
        <div class="rst-content">
          <div role="navigation" aria-label="breadcrumbs navigation">
  <ul class="wy-breadcrumbs">
    <li><a href="https://spark.apache.org/docs/latest/api/sql/">Docs</a> »</li>
    
      
    
    <li>Functions</li>
    <li class="wy-breadcrumbs-aside">
      
    </li>
  </ul>
  <hr>
</div>
          <div role="main">
            <div class="section">
              
                <h3 id="_1"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#_1">!</a></h3>
<p>! expr - Logical not.</p>
<p><br></p>
<h3 id="_2"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#_2">%</a></h3>
<p>expr1 % expr2 - Returns the remainder after <code>expr1</code>/<code>expr2</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs css">&gt; <span class="hljs-selector-tag">SELECT</span> 2 % 1<span class="hljs-selector-class">.8</span>;
 0<span class="hljs-selector-class">.2</span>
&gt; <span class="hljs-selector-tag">SELECT</span> <span class="hljs-selector-tag">MOD</span>(2, 1<span class="hljs-selector-class">.8</span>);
 0<span class="hljs-selector-class">.2</span>
</code></pre>

<p><br></p>
<h3 id="_3"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#_3">&amp;</a></h3>
<p>expr1 &amp; expr2 - Returns the result of bitwise AND of <code>expr1</code> and <code>expr2</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT 3 &amp; 5;</span>
 1
</code></pre>

<p><br></p>
<h3 id="_4"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#_4">*</a></h3>
<p>expr1 * expr2 - Returns <code>expr1</code>*<code>expr2</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT 2 * 3;</span>
 6
</code></pre>

<p><br></p>
<h3 id="_5"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#_5">+</a></h3>
<p>expr1 + expr2 - Returns <code>expr1</code>+<code>expr2</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT 1 + 2;</span>
 3
</code></pre>

<p><br></p>
<h3 id="-"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#-">-</a></h3>
<p>expr1 - expr2 - Returns <code>expr1</code>-<code>expr2</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT 2 - 1;</span>
 1
</code></pre>

<p><br></p>
<h3 id="_6"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#_6">/</a></h3>
<p>expr1 / expr2 - Returns <code>expr1</code>/<code>expr2</code>. It always performs floating point division.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT 3 / 2;</span>
 1.5
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT 2L / 2L;</span>
 1.0
</code></pre>

<p><br></p>
<h3 id="_7"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#_7">&lt;</a></h3>
<p>expr1 &lt; expr2 - Returns true if <code>expr1</code> is less than <code>expr2</code>.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>expr1, expr2 - the two expressions must be same type or can be casted to a common type,
    and must be a type that can be ordered. For example, map type is not orderable, so it
    is not supported. For complex types such array/struct, the data types of fields must
    be orderable.</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT 1 &lt; 2;</span>
 true
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT 1.1 &lt; <span class="hljs-string">'1'</span>;</span>
 false
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT to_date(<span class="hljs-string">'2009-07-30 04:17:52'</span>) &lt; to_date(<span class="hljs-string">'2009-07-30 04:17:52'</span>);</span>
 false
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT to_date(<span class="hljs-string">'2009-07-30 04:17:52'</span>) &lt; to_date(<span class="hljs-string">'2009-08-01 04:17:52'</span>);</span>
 true
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT 1 &lt; NULL;</span>
 NULL
</code></pre>

<p><br></p>
<h3 id="_8"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#_8">&lt;=</a></h3>
<p>expr1 &lt;= expr2 - Returns true if <code>expr1</code> is less than or equal to <code>expr2</code>.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>expr1, expr2 - the two expressions must be same type or can be casted to a common type,
    and must be a type that can be ordered. For example, map type is not orderable, so it
    is not supported. For complex types such array/struct, the data types of fields must
    be orderable.</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT 2 &lt;= 2;</span>
 true
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT 1.0 &lt;= <span class="hljs-string">'1'</span>;</span>
 true
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT to_date(<span class="hljs-string">'2009-07-30 04:17:52'</span>) &lt;= to_date(<span class="hljs-string">'2009-07-30 04:17:52'</span>);</span>
 true
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT to_date(<span class="hljs-string">'2009-07-30 04:17:52'</span>) &lt;= to_date(<span class="hljs-string">'2009-08-01 04:17:52'</span>);</span>
 true
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT 1 &lt;= NULL;</span>
 NULL
</code></pre>

<p><br></p>
<h3 id="_9"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#_9">&lt;=&gt;</a></h3>
<p>expr1 &lt;=&gt; expr2 - Returns same result as the EQUAL(=) operator for non-null operands,
but returns true if both are null, false if one of the them is null.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>expr1, expr2 - the two expressions must be same type or can be casted to a common type,
    and must be a type that can be used in equality comparison. Map type is not supported.
    For complex types such array/struct, the data types of fields must be orderable.</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs php">&gt; SELECT <span class="hljs-number">2</span> &lt;=&gt; <span class="hljs-number">2</span>;
 <span class="hljs-keyword">true</span>
&gt; SELECT <span class="hljs-number">1</span> &lt;=&gt; <span class="hljs-string">'1'</span>;
 <span class="hljs-keyword">true</span>
&gt; SELECT <span class="hljs-keyword">true</span> &lt;=&gt; <span class="hljs-keyword">NULL</span>;
 <span class="hljs-keyword">false</span>
&gt; SELECT <span class="hljs-keyword">NULL</span> &lt;=&gt; <span class="hljs-keyword">NULL</span>;
 <span class="hljs-keyword">true</span>
</code></pre>

<p><br></p>
<h3 id="_10"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#_10">=</a></h3>
<p>expr1 = expr2 - Returns true if <code>expr1</code> equals <code>expr2</code>, or false otherwise.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>expr1, expr2 - the two expressions must be same type or can be casted to a common type,
    and must be a type that can be used in equality comparison. Map type is not supported.
    For complex types such array/struct, the data types of fields must be orderable.</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT 2 = 2;</span>
 true
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT 1 = <span class="hljs-string">'1'</span>;</span>
 true
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT <span class="hljs-literal">true</span> = NULL;</span>
 NULL
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT NULL = NULL;</span>
 NULL
</code></pre>

<p><br></p>
<h3 id="_11"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#_11">==</a></h3>
<p>expr1 == expr2 - Returns true if <code>expr1</code> equals <code>expr2</code>, or false otherwise.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>expr1, expr2 - the two expressions must be same type or can be casted to a common type,
    and must be a type that can be used in equality comparison. Map type is not supported.
    For complex types such array/struct, the data types of fields must be orderable.</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT 2 == 2;</span>
 true
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT 1 == <span class="hljs-string">'1'</span>;</span>
 true
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT <span class="hljs-literal">true</span> == NULL;</span>
 NULL
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT NULL == NULL;</span>
 NULL
</code></pre>

<p><br></p>
<h3 id="_12"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#_12">&gt;</a></h3>
<p>expr1 &gt; expr2 - Returns true if <code>expr1</code> is greater than <code>expr2</code>.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>expr1, expr2 - the two expressions must be same type or can be casted to a common type,
    and must be a type that can be ordered. For example, map type is not orderable, so it
    is not supported. For complex types such array/struct, the data types of fields must
    be orderable.</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT 2 &gt; 1;</span>
 true
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT 2 &gt; <span class="hljs-string">'1.1'</span>;</span>
 true
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT to_date(<span class="hljs-string">'2009-07-30 04:17:52'</span>) &gt; to_date(<span class="hljs-string">'2009-07-30 04:17:52'</span>);</span>
 false
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT to_date(<span class="hljs-string">'2009-07-30 04:17:52'</span>) &gt; to_date(<span class="hljs-string">'2009-08-01 04:17:52'</span>);</span>
 false
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT 1 &gt; NULL;</span>
 NULL
</code></pre>

<p><br></p>
<h3 id="_13"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#_13">&gt;=</a></h3>
<p>expr1 &gt;= expr2 - Returns true if <code>expr1</code> is greater than or equal to <code>expr2</code>.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>expr1, expr2 - the two expressions must be same type or can be casted to a common type,
    and must be a type that can be ordered. For example, map type is not orderable, so it
    is not supported. For complex types such array/struct, the data types of fields must
    be orderable.</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT 2 &gt;= 1;</span>
 true
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT 2.0 &gt;= <span class="hljs-string">'2.1'</span>;</span>
 false
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT to_date(<span class="hljs-string">'2009-07-30 04:17:52'</span>) &gt;= to_date(<span class="hljs-string">'2009-07-30 04:17:52'</span>);</span>
 true
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT to_date(<span class="hljs-string">'2009-07-30 04:17:52'</span>) &gt;= to_date(<span class="hljs-string">'2009-08-01 04:17:52'</span>);</span>
 false
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT 1 &gt;= NULL;</span>
 NULL
</code></pre>

<p><br></p>
<h3 id="_14"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#_14">^</a></h3>
<p>expr1 ^ expr2 - Returns the result of bitwise exclusive OR of <code>expr1</code> and <code>expr2</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT 3 ^ 5;</span>
 6
</code></pre>

<p><br></p>
<h3 id="abs"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#abs">abs</a></h3>
<p>abs(expr) - Returns the absolute value of the numeric value.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT abs(-1);</span>
 1
</code></pre>

<p><br></p>
<h3 id="acos"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#acos">acos</a></h3>
<p>acos(expr) - Returns the inverse cosine (a.k.a. arc cosine) of <code>expr</code>, as if computed by
<code>java.lang.Math.acos</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT acos(1);</span>
 0.0
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT acos(2);</span>
 NaN
</code></pre>

<p><br></p>
<h3 id="acosh"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#acosh">acosh</a></h3>
<p>acosh(expr) - Returns inverse hyperbolic cosine of <code>expr</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT acosh(1);</span>
 0.0
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT acosh(0);</span>
 NaN
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="add_months"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#add_months">add_months</a></h3>
<p>add_months(start_date, num_months) - Returns the date that is <code>num_months</code> after <code>start_date</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT add_months(<span class="hljs-string">'2016-08-31'</span>, 1);</span>
 2016-09-30
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="aggregate"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#aggregate">aggregate</a></h3>
<p>aggregate(expr, start, merge, finish) - Applies a binary operator to an initial state and all
elements in the array, and reduces this to a single state. The final state is converted
into the final result by applying a finish function.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs coffeescript">&gt; SELECT aggregate(array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), <span class="hljs-number">0</span>, <span class="hljs-function"><span class="hljs-params">(acc, x)</span> -&gt;</span> acc + x);
 <span class="hljs-number">6</span>
&gt; SELECT aggregate(array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), <span class="hljs-number">0</span>, <span class="hljs-function"><span class="hljs-params">(acc, x)</span> -&gt;</span> acc + x, acc -&gt; acc * <span class="hljs-number">10</span>);
 <span class="hljs-number">60</span>
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="and"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#and">and</a></h3>
<p>expr1 and expr2 - Logical AND.</p>
<p><br></p>
<h3 id="any"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#any">any</a></h3>
<p>any(expr) - Returns true if at least one value of <code>expr</code> is true.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs php">&gt; SELECT any(col) FROM VALUES (<span class="hljs-keyword">true</span>), (<span class="hljs-keyword">false</span>), (<span class="hljs-keyword">false</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-keyword">true</span>
&gt; SELECT any(col) FROM VALUES (<span class="hljs-keyword">NULL</span>), (<span class="hljs-keyword">true</span>), (<span class="hljs-keyword">false</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-keyword">true</span>
&gt; SELECT any(col) FROM VALUES (<span class="hljs-keyword">false</span>), (<span class="hljs-keyword">false</span>), (<span class="hljs-keyword">NULL</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-keyword">false</span>
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="approx_count_distinct"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#approx_count_distinct">approx_count_distinct</a></h3>
<p>approx_count_distinct(expr[, relativeSD]) - Returns the estimated cardinality by HyperLogLog++.
<code>relativeSD</code> defines the maximum estimation error allowed.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT approx_count_distinct(col1) FROM VALUES (1), (1), (2), (2), (3) tab(col1);</span>
 3
</code></pre>

<p><strong>Since:</strong> 1.6.0</p>
<p><br></p>
<h3 id="approx_percentile"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#approx_percentile">approx_percentile</a></h3>
<p>approx_percentile(col, percentage [, accuracy]) - Returns the approximate percentile value of numeric
column <code>col</code> at the given percentage. The value of percentage must be between 0.0
and 1.0. The <code>accuracy</code> parameter (default: 10000) is a positive numeric literal which
controls approximation accuracy at the cost of memory. Higher value of <code>accuracy</code> yields
better accuracy, <code>1.0/accuracy</code> is the relative error of the approximation.
When <code>percentage</code> is an array, each value of the percentage array must be between 0.0 and 1.0.
In this case, returns the approximate percentile array of column <code>col</code> at the given
percentage array.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs css">&gt; <span class="hljs-selector-tag">SELECT</span> <span class="hljs-selector-tag">approx_percentile</span>(10<span class="hljs-selector-class">.0</span>, <span class="hljs-selector-tag">array</span>(0<span class="hljs-selector-class">.5</span>, 0<span class="hljs-selector-class">.4</span>, 0<span class="hljs-selector-class">.1</span>), 100);
 <span class="hljs-selector-attr">[10.0,10.0,10.0]</span>
&gt; <span class="hljs-selector-tag">SELECT</span> <span class="hljs-selector-tag">approx_percentile</span>(10<span class="hljs-selector-class">.0</span>, 0<span class="hljs-selector-class">.5</span>, 100);
 10<span class="hljs-selector-class">.0</span>
</code></pre>

<p><strong>Since:</strong> 2.1.0</p>
<p><br></p>
<h3 id="array"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#array">array</a></h3>
<p>array(expr, ...) - Returns an array with the given elements.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">array</span>(<span class="hljs-params"><span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span></span>)</span>;
 [<span class="hljs-meta">1,2,3</span>]
</code></pre>

<p><br></p>
<h3 id="array_contains"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#array_contains">array_contains</a></h3>
<p>array_contains(array, value) - Returns true if the array contains the value.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">array_contains</span>(<span class="hljs-params">array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span></span>), 2)</span>;
 <span class="hljs-literal">true</span>
</code></pre>

<p><br></p>
<h3 id="array_distinct"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#array_distinct">array_distinct</a></h3>
<p>array_distinct(array) - Removes duplicate values from the array.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">array_distinct</span>(<span class="hljs-params">array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">3</span></span>))</span>;
 [<span class="hljs-meta">1,2,3,null</span>]
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="array_except"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#array_except">array_except</a></h3>
<p>array_except(array1, array2) - Returns an array of the elements in array1 but not in array2,
without duplicates.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">array_except</span>(<span class="hljs-params">array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span></span>), <span class="hljs-title">array</span>(<span class="hljs-params"><span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span></span>))</span>;
 [<span class="hljs-meta">2</span>]
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="array_intersect"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#array_intersect">array_intersect</a></h3>
<p>array_intersect(array1, array2) - Returns an array of the elements in the intersection of array1 and
array2, without duplicates.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">array_intersect</span>(<span class="hljs-params">array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span></span>), <span class="hljs-title">array</span>(<span class="hljs-params"><span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span></span>))</span>;
 [<span class="hljs-meta">1,3</span>]
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="array_join"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#array_join">array_join</a></h3>
<p>array_join(array, delimiter[, nullReplacement]) - Concatenates the elements of the given array
using the delimiter and an optional string to replace nulls. If no value is set for
nullReplacement, any null value is filtered.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT array_join(array(<span class="hljs-string">'hello'</span>, <span class="hljs-string">'world'</span>), <span class="hljs-string">' '</span>);</span>
 hello world
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT array_join(array(<span class="hljs-string">'hello'</span>, null ,<span class="hljs-string">'world'</span>), <span class="hljs-string">' '</span>);</span>
 hello world
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT array_join(array(<span class="hljs-string">'hello'</span>, null ,<span class="hljs-string">'world'</span>), <span class="hljs-string">' '</span>, <span class="hljs-string">','</span>);</span>
 hello , world
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="array_max"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#array_max">array_max</a></h3>
<p>array_max(array) - Returns the maximum value in the array. NULL elements are skipped.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">array_max</span>(<span class="hljs-params">array(<span class="hljs-number">1</span>, <span class="hljs-number">20</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">3</span></span>))</span>;
 <span class="hljs-number">20</span>
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="array_min"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#array_min">array_min</a></h3>
<p>array_min(array) - Returns the minimum value in the array. NULL elements are skipped.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">array_min</span>(<span class="hljs-params">array(<span class="hljs-number">1</span>, <span class="hljs-number">20</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">3</span></span>))</span>;
 <span class="hljs-number">1</span>
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="array_position"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#array_position">array_position</a></h3>
<p>array_position(array, element) - Returns the (1-based) index of the first element of the array as long.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT array_position(array(3, 2, 1), 1);</span>
 3
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="array_remove"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#array_remove">array_remove</a></h3>
<p>array_remove(array, element) - Remove all elements that equal to element from array.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">array_remove</span>(<span class="hljs-params">array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">3</span></span>), 3)</span>;
 [<span class="hljs-meta">1,2,null</span>]
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="array_repeat"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#array_repeat">array_repeat</a></h3>
<p>array_repeat(element, count) - Returns the array containing element count times.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">array_repeat</span>(<span class="hljs-params"><span class="hljs-string">'123'</span>, <span class="hljs-number">2</span></span>)</span>;
 [<span class="hljs-meta"><span class="hljs-meta-string">"123"</span>,<span class="hljs-meta-string">"123"</span></span>]
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="array_sort"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#array_sort">array_sort</a></h3>
<p>array_sort(expr, func) - Sorts the input array. If func is omitted, sort
in ascending order. The elements of the input array must be orderable. Null elements
will be placed at the end of the returned array. Since 3.0.0 this function also sorts
and returns the array based on the given comparator function. The comparator will
take two arguments representing two elements of the array.
It returns -1, 0, or 1 as the first element is less than, equal to, or greater
than the second element. If the comparator function returns other
values (including null), the function will fail and raise an error.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs coffeescript">&gt; SELECT array_sort(array(<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>), <span class="hljs-function"><span class="hljs-params">(left, right)</span> -&gt;</span> case <span class="hljs-keyword">when</span> left &lt; right <span class="hljs-keyword">then</span> <span class="hljs-number">-1</span> <span class="hljs-keyword">when</span> left &gt; right <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> end);
 [<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]
&gt; SELECT array_sort(array(<span class="hljs-string">'bc'</span>, <span class="hljs-string">'ab'</span>, <span class="hljs-string">'dc'</span>), <span class="hljs-function"><span class="hljs-params">(left, right)</span> -&gt;</span> case <span class="hljs-keyword">when</span> left <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">and</span> right <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">then</span> <span class="hljs-number">0</span> <span class="hljs-keyword">when</span> left <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">then</span> <span class="hljs-number">-1</span> <span class="hljs-keyword">when</span> right <span class="hljs-keyword">is</span> <span class="hljs-literal">null</span> <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">when</span> left &lt; right <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">when</span> left &gt; right <span class="hljs-keyword">then</span> <span class="hljs-number">-1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> end);
 [<span class="hljs-string">"dc"</span>,<span class="hljs-string">"bc"</span>,<span class="hljs-string">"ab"</span>]
&gt; SELECT array_sort(array(<span class="hljs-string">'b'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'a'</span>));
 [<span class="hljs-string">"a"</span>,<span class="hljs-string">"b"</span>,<span class="hljs-string">"c"</span>,<span class="hljs-string">"d"</span>,<span class="hljs-literal">null</span>]
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="array_union"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#array_union">array_union</a></h3>
<p>array_union(array1, array2) - Returns an array of the elements in the union of array1 and array2,
without duplicates.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">array_union</span>(<span class="hljs-params">array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span></span>), <span class="hljs-title">array</span>(<span class="hljs-params"><span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span></span>))</span>;
 [<span class="hljs-meta">1,2,3,5</span>]
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="arrays_overlap"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#arrays_overlap">arrays_overlap</a></h3>
<p>arrays_overlap(a1, a2) - Returns true if a1 contains at least a non-null element present also in a2. If the arrays have no common element and they are both non-empty and either of them contains a null element null is returned, false otherwise.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs php">&gt; SELECT arrays_overlap(<span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), <span class="hljs-keyword">array</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>));
 <span class="hljs-keyword">true</span>
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="arrays_zip"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#arrays_zip">arrays_zip</a></h3>
<p>arrays_zip(a1, a2, ...) - Returns a merged array of structs in which the N-th struct contains all
N-th values of input arrays.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs php">&gt; SELECT arrays_zip(<span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), <span class="hljs-keyword">array</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>));
 [{<span class="hljs-string">"0"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"1"</span>:<span class="hljs-number">2</span>},{<span class="hljs-string">"0"</span>:<span class="hljs-number">2</span>,<span class="hljs-string">"1"</span>:<span class="hljs-number">3</span>},{<span class="hljs-string">"0"</span>:<span class="hljs-number">3</span>,<span class="hljs-string">"1"</span>:<span class="hljs-number">4</span>}]
&gt; SELECT arrays_zip(<span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), <span class="hljs-keyword">array</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>), <span class="hljs-keyword">array</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>));
 [{<span class="hljs-string">"0"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"1"</span>:<span class="hljs-number">2</span>,<span class="hljs-string">"2"</span>:<span class="hljs-number">3</span>},{<span class="hljs-string">"0"</span>:<span class="hljs-number">2</span>,<span class="hljs-string">"1"</span>:<span class="hljs-number">3</span>,<span class="hljs-string">"2"</span>:<span class="hljs-number">4</span>}]
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="ascii"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#ascii">ascii</a></h3>
<p>ascii(str) - Returns the numeric value of the first character of <code>str</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT ascii(<span class="hljs-string">'222'</span>);</span>
 50
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT ascii(2);</span>
 50
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="asin"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#asin">asin</a></h3>
<p>asin(expr) - Returns the inverse sine (a.k.a. arc sine) the arc sin of <code>expr</code>,
as if computed by <code>java.lang.Math.asin</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT asin(0);</span>
 0.0
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT asin(2);</span>
 NaN
</code></pre>

<p><br></p>
<h3 id="asinh"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#asinh">asinh</a></h3>
<p>asinh(expr) - Returns inverse hyperbolic sine of <code>expr</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT asinh(0);</span>
 0.0
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="assert_true"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#assert_true">assert_true</a></h3>
<p>assert_true(expr) - Throws an exception if <code>expr</code> is not true.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cpp">&gt; <span class="hljs-function">SELECT <span class="hljs-title">assert_true</span><span class="hljs-params">(<span class="hljs-number">0</span> &lt; <span class="hljs-number">1</span>)</span></span>;
 <span class="hljs-literal">NULL</span>
</code></pre>

<p><br></p>
<h3 id="atan"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#atan">atan</a></h3>
<p>atan(expr) - Returns the inverse tangent (a.k.a. arc tangent) of <code>expr</code>, as if computed by
<code>java.lang.Math.atan</code></p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT atan(0);</span>
 0.0
</code></pre>

<p><br></p>
<h3 id="atan2"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#atan2">atan2</a></h3>
<p>atan2(exprY, exprX) - Returns the angle in radians between the positive x-axis of a plane
and the point given by the coordinates (<code>exprX</code>, <code>exprY</code>), as if computed by
<code>java.lang.Math.atan2</code>.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>exprY - coordinate on y-axis</li>
<li>exprX - coordinate on x-axis</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT atan2(0, 0);</span>
 0.0
</code></pre>

<p><br></p>
<h3 id="atanh"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#atanh">atanh</a></h3>
<p>atanh(expr) - Returns inverse hyperbolic tangent of <code>expr</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT atanh(0);</span>
 0.0
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT atanh(2);</span>
 NaN
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="avg"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#avg">avg</a></h3>
<p>avg(expr) - Returns the mean calculated from values of a group.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT avg(col) FROM VALUES (1), (2), (3) AS tab(col);</span>
 2.0
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT avg(col) FROM VALUES (1), (2), (NULL) AS tab(col);</span>
 1.5
</code></pre>

<p><strong>Since:</strong> 1.0.0</p>
<p><br></p>
<h3 id="base64"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#base64">base64</a></h3>
<p>base64(bin) - Converts the argument from a binary <code>bin</code> to a base 64 string.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT base64(<span class="hljs-string">'Spark SQL'</span>);</span>
 U3BhcmsgU1FM
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="bigint"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#bigint">bigint</a></h3>
<p>bigint(expr) - Casts the value <code>expr</code> to the target data type <code>bigint</code>.</p>
<p><br></p>
<h3 id="bin"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#bin">bin</a></h3>
<p>bin(expr) - Returns the string representation of the long value <code>expr</code> represented in binary.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT bin(13);</span>
 1101
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT bin(-13);</span>
 1111111111111111111111111111111111111111111111111111111111110011
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT bin(13.3);</span>
 1101
</code></pre>

<p><br></p>
<h3 id="binary"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#binary">binary</a></h3>
<p>binary(expr) - Casts the value <code>expr</code> to the target data type <code>binary</code>.</p>
<p><br></p>
<h3 id="bit_and"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#bit_and">bit_and</a></h3>
<p>bit_and(expr) - Returns the bitwise AND of all non-null input values, or null if none.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT bit_and(col) FROM VALUES (3), (5) AS tab(col);</span>
 1
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="bit_count"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#bit_count">bit_count</a></h3>
<p>bit_count(expr) - Returns the number of bits that are set in the argument expr as an unsigned 64-bit integer, or NULL if the argument is NULL.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT bit_count(0);</span>
 0
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="bit_length"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#bit_length">bit_length</a></h3>
<p>bit_length(expr) - Returns the bit length of string data or number of bits of binary data.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT bit_length(<span class="hljs-string">'Spark SQL'</span>);</span>
 72
</code></pre>

<p><strong>Since:</strong> 2.3.0</p>
<p><br></p>
<h3 id="bit_or"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#bit_or">bit_or</a></h3>
<p>bit_or(expr) - Returns the bitwise OR of all non-null input values, or null if none.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT bit_or(col) FROM VALUES (3), (5) AS tab(col);</span>
 7
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="bit_xor"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#bit_xor">bit_xor</a></h3>
<p>bit_xor(expr) - Returns the bitwise XOR of all non-null input values, or null if none.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT bit_xor(col) FROM VALUES (3), (5) AS tab(col);</span>
 6
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="bool_and"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#bool_and">bool_and</a></h3>
<p>bool_and(expr) - Returns true if all values of <code>expr</code> are true.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs php">&gt; SELECT bool_and(col) FROM VALUES (<span class="hljs-keyword">true</span>), (<span class="hljs-keyword">true</span>), (<span class="hljs-keyword">true</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-keyword">true</span>
&gt; SELECT bool_and(col) FROM VALUES (<span class="hljs-keyword">NULL</span>), (<span class="hljs-keyword">true</span>), (<span class="hljs-keyword">true</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-keyword">true</span>
&gt; SELECT bool_and(col) FROM VALUES (<span class="hljs-keyword">true</span>), (<span class="hljs-keyword">false</span>), (<span class="hljs-keyword">true</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-keyword">false</span>
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="bool_or"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#bool_or">bool_or</a></h3>
<p>bool_or(expr) - Returns true if at least one value of <code>expr</code> is true.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs php">&gt; SELECT bool_or(col) FROM VALUES (<span class="hljs-keyword">true</span>), (<span class="hljs-keyword">false</span>), (<span class="hljs-keyword">false</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-keyword">true</span>
&gt; SELECT bool_or(col) FROM VALUES (<span class="hljs-keyword">NULL</span>), (<span class="hljs-keyword">true</span>), (<span class="hljs-keyword">false</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-keyword">true</span>
&gt; SELECT bool_or(col) FROM VALUES (<span class="hljs-keyword">false</span>), (<span class="hljs-keyword">false</span>), (<span class="hljs-keyword">NULL</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-keyword">false</span>
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="boolean"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#boolean">boolean</a></h3>
<p>boolean(expr) - Casts the value <code>expr</code> to the target data type <code>boolean</code>.</p>
<p><br></p>
<h3 id="bround"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#bround">bround</a></h3>
<p>bround(expr, d) - Returns <code>expr</code> rounded to <code>d</code> decimal places using HALF_EVEN rounding mode.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT bround(2.5, 0);</span>
 2
</code></pre>

<p><br></p>
<h3 id="cardinality"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#cardinality">cardinality</a></h3>
<p>cardinality(expr) - Returns the size of an array or a map.
The function returns null for null input if spark.sql.legacy.sizeOfNull is set to false or
spark.sql.ansi.enabled is set to true. Otherwise, the function returns -1 for null input.
With the default settings, the function returns -1 for null input.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT cardinality(array(<span class="hljs-string">'b'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'a'</span>));</span>
 4
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT cardinality(map(<span class="hljs-string">'a'</span>, 1, <span class="hljs-string">'b'</span>, 2));</span>
 2
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT cardinality(NULL);</span>
 -1
</code></pre>

<p><br></p>
<h3 id="cast"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#cast">cast</a></h3>
<p>cast(expr AS type) - Casts the value <code>expr</code> to the target data type <code>type</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">cast</span>(<span class="hljs-params"><span class="hljs-string">'10'</span> <span class="hljs-keyword">as</span> <span class="hljs-keyword">int</span></span>)</span>;
 <span class="hljs-number">10</span>
</code></pre>

<p><br></p>
<h3 id="cbrt"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#cbrt">cbrt</a></h3>
<p>cbrt(expr) - Returns the cube root of <code>expr</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs css">&gt; <span class="hljs-selector-tag">SELECT</span> <span class="hljs-selector-tag">cbrt</span>(27<span class="hljs-selector-class">.0</span>);
 3<span class="hljs-selector-class">.0</span>
</code></pre>

<p><br></p>
<h3 id="ceil"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#ceil">ceil</a></h3>
<p>ceil(expr) - Returns the smallest integer not smaller than <code>expr</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT ceil(-0.1);</span>
 0
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT ceil(5);</span>
 5
</code></pre>

<p><br></p>
<h3 id="ceiling"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#ceiling">ceiling</a></h3>
<p>ceiling(expr) - Returns the smallest integer not smaller than <code>expr</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT ceiling(-0.1);</span>
 0
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT ceiling(5);</span>
 5
</code></pre>

<p><br></p>
<h3 id="char"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#char">char</a></h3>
<p>char(expr) - Returns the ASCII character having the binary equivalent to <code>expr</code>. If n is larger than 256 the result is equivalent to chr(n % 256)</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT char(65);</span>
 A
</code></pre>

<p><strong>Since:</strong> 2.3.0</p>
<p><br></p>
<h3 id="char_length"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#char_length">char_length</a></h3>
<p>char_length(expr) - Returns the character length of string data or number of bytes of binary data. The length of string data includes the trailing spaces. The length of binary data includes binary zeros.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT char_length(<span class="hljs-string">'Spark SQL '</span>);</span>
 10
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT CHAR_LENGTH(<span class="hljs-string">'Spark SQL '</span>);</span>
 10
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT CHARACTER_LENGTH(<span class="hljs-string">'Spark SQL '</span>);</span>
 10
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="character_length"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#character_length">character_length</a></h3>
<p>character_length(expr) - Returns the character length of string data or number of bytes of binary data. The length of string data includes the trailing spaces. The length of binary data includes binary zeros.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT character_length(<span class="hljs-string">'Spark SQL '</span>);</span>
 10
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT CHAR_LENGTH(<span class="hljs-string">'Spark SQL '</span>);</span>
 10
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT CHARACTER_LENGTH(<span class="hljs-string">'Spark SQL '</span>);</span>
 10
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="chr"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#chr">chr</a></h3>
<p>chr(expr) - Returns the ASCII character having the binary equivalent to <code>expr</code>. If n is larger than 256 the result is equivalent to chr(n % 256)</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT chr(65);</span>
 A
</code></pre>

<p><strong>Since:</strong> 2.3.0</p>
<p><br></p>
<h3 id="coalesce"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#coalesce">coalesce</a></h3>
<p>coalesce(expr1, expr2, ...) - Returns the first non-null argument if exists. Otherwise, null.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cpp">&gt; <span class="hljs-function">SELECT <span class="hljs-title">coalesce</span><span class="hljs-params">(<span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">NULL</span>)</span></span>;
 <span class="hljs-number">1</span>
</code></pre>

<p><strong>Since:</strong> 1.0.0</p>
<p><br></p>
<h3 id="collect_list"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#collect_list">collect_list</a></h3>
<p>collect_list(expr) - Collects and returns a list of non-unique elements.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">collect_list</span>(<span class="hljs-params">col</span>) FROM <span class="hljs-title">VALUES</span> (<span class="hljs-params"><span class="hljs-number">1</span></span>), (<span class="hljs-params"><span class="hljs-number">2</span></span>), (<span class="hljs-params"><span class="hljs-number">1</span></span>) AS <span class="hljs-title">tab</span>(<span class="hljs-params">col</span>)</span>;
 [<span class="hljs-meta">1,2,1</span>]
</code></pre>

<p><strong>Note:</strong></p>
<p>The function is non-deterministic because the order of collected results depends
on the order of the rows which may be non-deterministic after a shuffle.</p>
<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="collect_set"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#collect_set">collect_set</a></h3>
<p>collect_set(expr) - Collects and returns a set of unique elements.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">collect_set</span>(<span class="hljs-params">col</span>) FROM <span class="hljs-title">VALUES</span> (<span class="hljs-params"><span class="hljs-number">1</span></span>), (<span class="hljs-params"><span class="hljs-number">2</span></span>), (<span class="hljs-params"><span class="hljs-number">1</span></span>) AS <span class="hljs-title">tab</span>(<span class="hljs-params">col</span>)</span>;
 [<span class="hljs-meta">1,2</span>]
</code></pre>

<p><strong>Note:</strong></p>
<p>The function is non-deterministic because the order of collected results depends
on the order of the rows which may be non-deterministic after a shuffle.</p>
<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="concat"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#concat">concat</a></h3>
<p>concat(col1, col2, ..., colN) - Returns the concatenation of col1, col2, ..., colN.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT concat(<span class="hljs-string">'Spark'</span>, <span class="hljs-string">'SQL'</span>);</span>
 SparkSQL
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT concat(array(1, 2, 3), array(4, 5), array(6));</span>
 [1,2,3,4,5,6]
</code></pre>

<p><strong>Note:</strong></p>
<p>Concat logic for arrays is available since 2.4.0.</p>
<p><br></p>
<h3 id="concat_ws"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#concat_ws">concat_ws</a></h3>
<p>concat_ws(sep, [str | array(str)]+) - Returns the concatenation of the strings separated by <code>sep</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT concat_ws(<span class="hljs-string">' '</span>, <span class="hljs-string">'Spark'</span>, <span class="hljs-string">'SQL'</span>);</span>
  Spark SQL
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="conv"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#conv">conv</a></h3>
<p>conv(num, from_base, to_base) - Convert <code>num</code> from <code>from_base</code> to <code>to_base</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT conv(<span class="hljs-string">'100'</span>, 2, 10);</span>
 4
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT conv(-10, 16, -10);</span>
 -16
</code></pre>

<p><br></p>
<h3 id="corr"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#corr">corr</a></h3>
<p>corr(expr1, expr2) - Returns Pearson coefficient of correlation between a set of number pairs.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">corr</span>(<span class="hljs-params">c1, c2</span>) FROM <span class="hljs-title">VALUES</span> (<span class="hljs-params"><span class="hljs-number">3</span>, <span class="hljs-number">2</span></span>), (<span class="hljs-params"><span class="hljs-number">3</span>, <span class="hljs-number">3</span></span>), (<span class="hljs-params"><span class="hljs-number">6</span>, <span class="hljs-number">4</span></span>) <span class="hljs-keyword">as</span> <span class="hljs-title">tab</span>(<span class="hljs-params">c1, c2</span>)</span>;
 <span class="hljs-number">0.8660254037844387</span>
</code></pre>

<p><strong>Since:</strong> 1.6.0</p>
<p><br></p>
<h3 id="cos"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#cos">cos</a></h3>
<p>cos(expr) - Returns the cosine of <code>expr</code>, as if computed by
<code>java.lang.Math.cos</code>.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>expr - angle in radians</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT cos(0);</span>
 1.0
</code></pre>

<p><br></p>
<h3 id="cosh"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#cosh">cosh</a></h3>
<p>cosh(expr) - Returns the hyperbolic cosine of <code>expr</code>, as if computed by
<code>java.lang.Math.cosh</code>.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>expr - hyperbolic angle</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT cosh(0);</span>
 1.0
</code></pre>

<p><br></p>
<h3 id="cot"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#cot">cot</a></h3>
<p>cot(expr) - Returns the cotangent of <code>expr</code>, as if computed by <code>1/java.lang.Math.cot</code>.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>expr - angle in radians</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT cot(1);</span>
 0.6420926159343306
</code></pre>

<p><br></p>
<h3 id="count"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#count">count</a></h3>
<p>count(*) - Returns the total number of retrieved rows, including rows containing null.</p>
<p>count(expr[, expr...]) - Returns the number of rows for which the supplied expression(s) are all non-null.</p>
<p>count(DISTINCT expr[, expr...]) - Returns the number of rows for which the supplied expression(s) are unique and non-null.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs php">&gt; SELECT count(*) FROM VALUES (<span class="hljs-keyword">NULL</span>), (<span class="hljs-number">5</span>), (<span class="hljs-number">5</span>), (<span class="hljs-number">20</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-number">4</span>
&gt; SELECT count(col) FROM VALUES (<span class="hljs-keyword">NULL</span>), (<span class="hljs-number">5</span>), (<span class="hljs-number">5</span>), (<span class="hljs-number">20</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-number">3</span>
&gt; SELECT count(DISTINCT col) FROM VALUES (<span class="hljs-keyword">NULL</span>), (<span class="hljs-number">5</span>), (<span class="hljs-number">5</span>), (<span class="hljs-number">10</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-number">2</span>
</code></pre>

<p><strong>Since:</strong> 1.0.0</p>
<p><br></p>
<h3 id="count_if"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#count_if">count_if</a></h3>
<p>count_if(expr) - Returns the number of <code>TRUE</code> values for the expression.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs php">&gt; SELECT count_if(col % <span class="hljs-number">2</span> = <span class="hljs-number">0</span>) FROM VALUES (<span class="hljs-keyword">NULL</span>), (<span class="hljs-number">0</span>), (<span class="hljs-number">1</span>), (<span class="hljs-number">2</span>), (<span class="hljs-number">3</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-number">2</span>
&gt; SELECT count_if(col IS <span class="hljs-keyword">NULL</span>) FROM VALUES (<span class="hljs-keyword">NULL</span>), (<span class="hljs-number">0</span>), (<span class="hljs-number">1</span>), (<span class="hljs-number">2</span>), (<span class="hljs-number">3</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-number">1</span>
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="count_min_sketch"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#count_min_sketch">count_min_sketch</a></h3>
<p>count_min_sketch(col, eps, confidence, seed) - Returns a count-min sketch of a column with the given esp,
confidence and seed. The result is an array of bytes, which can be deserialized to a
<code>CountMinSketch</code> before usage. Count-min sketch is a probabilistic data structure used for
cardinality estimation using sub-linear space.</p>
<p><strong>Since:</strong> 2.2.0</p>
<p><br></p>
<h3 id="covar_pop"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#covar_pop">covar_pop</a></h3>
<p>covar_pop(expr1, expr2) - Returns the population covariance of a set of number pairs.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT covar_pop(c1, c2) FROM VALUES (1,1), (2,2), (3,3) AS tab(c1, c2);</span>
 0.6666666666666666
</code></pre>

<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="covar_samp"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#covar_samp">covar_samp</a></h3>
<p>covar_samp(expr1, expr2) - Returns the sample covariance of a set of number pairs.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT covar_samp(c1, c2) FROM VALUES (1,1), (2,2), (3,3) AS tab(c1, c2);</span>
 1.0
</code></pre>

<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="crc32"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#crc32">crc32</a></h3>
<p>crc32(expr) - Returns a cyclic redundancy check value of the <code>expr</code> as a bigint.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT crc32(<span class="hljs-string">'Spark'</span>);</span>
 1557323817
</code></pre>

<p><br></p>
<h3 id="cube"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#cube">cube</a></h3>
<p>cube([col1[, col2 ..]]) - create a multi-dimensional cube using the specified columns
so that we can run aggregation on them.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs php">&gt; SELECT name, age, count(*) FROM VALUES (<span class="hljs-number">2</span>, <span class="hljs-string">'Alice'</span>), (<span class="hljs-number">5</span>, <span class="hljs-string">'Bob'</span>) people(age, name) GROUP BY cube(name, age);
  Bob   <span class="hljs-number">5</span>   <span class="hljs-number">1</span>
  Alice <span class="hljs-number">2</span>   <span class="hljs-number">1</span>
  <span class="hljs-keyword">NULL</span>  <span class="hljs-keyword">NULL</span>    <span class="hljs-number">2</span>
  <span class="hljs-keyword">NULL</span>  <span class="hljs-number">5</span>   <span class="hljs-number">1</span>
  Bob   <span class="hljs-keyword">NULL</span>    <span class="hljs-number">1</span>
  Alice <span class="hljs-keyword">NULL</span>    <span class="hljs-number">1</span>
  <span class="hljs-keyword">NULL</span>  <span class="hljs-number">2</span>   <span class="hljs-number">1</span>
</code></pre>

<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="cume_dist"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#cume_dist">cume_dist</a></h3>
<p>cume_dist() - Computes the position of a value relative to all values in the partition.</p>
<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="current_database"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#current_database">current_database</a></h3>
<p>current_database() - Returns the current database.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cpp">&gt; <span class="hljs-function">SELECT <span class="hljs-title">current_database</span><span class="hljs-params">()</span></span>;
 <span class="hljs-keyword">default</span>
</code></pre>

<p><br></p>
<h3 id="current_date"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#current_date">current_date</a></h3>
<p>current_date() - Returns the current date at the start of query evaluation.</p>
<p>current_date - Returns the current date at the start of query evaluation.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT current_date();</span>
 2020-04-25
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT current_date;</span>
 2020-04-25
</code></pre>

<p><strong>Note:</strong></p>
<p>The syntax without braces has been supported since 2.0.1.</p>
<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="current_timestamp"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#current_timestamp">current_timestamp</a></h3>
<p>current_timestamp() - Returns the current timestamp at the start of query evaluation.</p>
<p>current_timestamp - Returns the current timestamp at the start of query evaluation.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs css">&gt; <span class="hljs-selector-tag">SELECT</span> <span class="hljs-selector-tag">current_timestamp</span>();
 2020<span class="hljs-selector-tag">-04-25</span> 15<span class="hljs-selector-pseudo">:49</span><span class="hljs-selector-pseudo">:11.914</span>
&gt; <span class="hljs-selector-tag">SELECT</span> <span class="hljs-selector-tag">current_timestamp</span>;
 2020<span class="hljs-selector-tag">-04-25</span> 15<span class="hljs-selector-pseudo">:49</span><span class="hljs-selector-pseudo">:11.914</span>
</code></pre>

<p><strong>Note:</strong></p>
<p>The syntax without braces has been supported since 2.0.1.</p>
<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="date"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#date">date</a></h3>
<p>date(expr) - Casts the value <code>expr</code> to the target data type <code>date</code>.</p>
<p><br></p>
<h3 id="date_add"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#date_add">date_add</a></h3>
<p>date_add(start_date, num_days) - Returns the date that is <code>num_days</code> after <code>start_date</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT date_add(<span class="hljs-string">'2016-07-30'</span>, 1);</span>
 2016-07-31
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="date_format"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#date_format">date_format</a></h3>
<p>date_format(timestamp, fmt) - Converts <code>timestamp</code> to a value of string in the format specified by the date format <code>fmt</code>.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>timestamp - A date/timestamp or string to be converted to the given format.</li>
<li>fmt - Date/time format pattern to follow. See <a href="https://spark.apache.org/docs/latest/sql-ref-datetime-pattern.html">Datetime Patterns</a> for valid date
        and time format patterns.</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT date_format(<span class="hljs-string">'2016-04-08'</span>, <span class="hljs-string">'y'</span>);</span>
 2016
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="date_part"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#date_part">date_part</a></h3>
<p>date_part(field, source) - Extracts a part of the date/timestamp or interval source.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>field - selects which part of the source should be extracted, and supported string values are as same as the fields of the equivalent function <code>EXTRACT</code>.</li>
<li>source - a date/timestamp or interval column from where <code>field</code> should be extracted</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT date_part(<span class="hljs-string">'YEAR'</span>, TIMESTAMP <span class="hljs-string">'2019-08-12 01:00:00.123456'</span>);</span>
 2019
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT date_part(<span class="hljs-string">'week'</span>, timestamp<span class="hljs-string">'2019-08-12 01:00:00.123456'</span>);</span>
 33
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT date_part(<span class="hljs-string">'doy'</span>, DATE<span class="hljs-string">'2019-08-12'</span>);</span>
 224
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT date_part(<span class="hljs-string">'SECONDS'</span>, timestamp<span class="hljs-string">'2019-10-01 00:00:01.000001'</span>);</span>
 1.000001
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT date_part(<span class="hljs-string">'days'</span>, interval 1 year 10 months 5 days);</span>
 5
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT date_part(<span class="hljs-string">'seconds'</span>, interval 5 hours 30 seconds 1 milliseconds 1 microseconds);</span>
 30.001001
</code></pre>

<p><strong>Note:</strong></p>
<p>The date_part function is equivalent to the SQL-standard function <code>EXTRACT(field FROM source)</code></p>
<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="date_sub"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#date_sub">date_sub</a></h3>
<p>date_sub(start_date, num_days) - Returns the date that is <code>num_days</code> before <code>start_date</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT date_sub(<span class="hljs-string">'2016-07-30'</span>, 1);</span>
 2016-07-29
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="date_trunc"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#date_trunc">date_trunc</a></h3>
<p>date_trunc(fmt, ts) - Returns timestamp <code>ts</code> truncated to the unit specified by the format model <code>fmt</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT date_trunc(<span class="hljs-string">'YEAR'</span>, <span class="hljs-string">'2015-03-05T09:32:05.359'</span>);</span>
 2015-01-01 00:00:00
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT date_trunc(<span class="hljs-string">'MM'</span>, <span class="hljs-string">'2015-03-05T09:32:05.359'</span>);</span>
 2015-03-01 00:00:00
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT date_trunc(<span class="hljs-string">'DD'</span>, <span class="hljs-string">'2015-03-05T09:32:05.359'</span>);</span>
 2015-03-05 00:00:00
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT date_trunc(<span class="hljs-string">'HOUR'</span>, <span class="hljs-string">'2015-03-05T09:32:05.359'</span>);</span>
 2015-03-05 09:00:00
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT date_trunc(<span class="hljs-string">'MILLISECOND'</span>, <span class="hljs-string">'2015-03-05T09:32:05.123456'</span>);</span>
 2015-03-05 09:32:05.123
</code></pre>

<p><strong>Since:</strong> 2.3.0</p>
<p><br></p>
<h3 id="datediff"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#datediff">datediff</a></h3>
<p>datediff(endDate, startDate) - Returns the number of days from <code>startDate</code> to <code>endDate</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT datediff(<span class="hljs-string">'2009-07-31'</span>, <span class="hljs-string">'2009-07-30'</span>);</span>
 1
<span class="hljs-meta">
&gt;</span><span class="bash"> SELECT datediff(<span class="hljs-string">'2009-07-30'</span>, <span class="hljs-string">'2009-07-31'</span>);</span>
 -1
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="day"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#day">day</a></h3>
<p>day(date) - Returns the day of month of the date/timestamp.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT day(<span class="hljs-string">'2009-07-30'</span>);</span>
 30
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="dayofmonth"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#dayofmonth">dayofmonth</a></h3>
<p>dayofmonth(date) - Returns the day of month of the date/timestamp.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT dayofmonth(<span class="hljs-string">'2009-07-30'</span>);</span>
 30
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="dayofweek"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#dayofweek">dayofweek</a></h3>
<p>dayofweek(date) - Returns the day of the week for date/timestamp (1 = Sunday, 2 = Monday, ..., 7 = Saturday).</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT dayofweek(<span class="hljs-string">'2009-07-30'</span>);</span>
 5
</code></pre>

<p><strong>Since:</strong> 2.3.0</p>
<p><br></p>
<h3 id="dayofyear"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#dayofyear">dayofyear</a></h3>
<p>dayofyear(date) - Returns the day of year of the date/timestamp.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT dayofyear(<span class="hljs-string">'2016-04-09'</span>);</span>
 100
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="decimal"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#decimal">decimal</a></h3>
<p>decimal(expr) - Casts the value <code>expr</code> to the target data type <code>decimal</code>.</p>
<p><br></p>
<h3 id="decode"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#decode">decode</a></h3>
<p>decode(bin, charset) - Decodes the first argument using the second argument character set.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT decode(encode(<span class="hljs-string">'abc'</span>, <span class="hljs-string">'utf-8'</span>), <span class="hljs-string">'utf-8'</span>);</span>
 abc
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="degrees"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#degrees">degrees</a></h3>
<p>degrees(expr) - Converts radians to degrees.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>expr - angle in radians</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs css">&gt; <span class="hljs-selector-tag">SELECT</span> <span class="hljs-selector-tag">degrees</span>(3<span class="hljs-selector-class">.141592653589793</span>);
 180<span class="hljs-selector-class">.0</span>
</code></pre>

<p><br></p>
<h3 id="dense_rank"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#dense_rank">dense_rank</a></h3>
<p>dense_rank() - Computes the rank of a value in a group of values. The result is one plus the
previously assigned rank value. Unlike the function rank, dense_rank will not produce gaps
in the ranking sequence.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>children - this is to base the rank on; a change in the value of one the children will
    trigger a change in rank. This is an internal parameter and will be assigned by the
    Analyser.</li>
</ul>
<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="div"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#div">div</a></h3>
<p>expr1 div expr2 - Divide <code>expr1</code> by <code>expr2</code>. It returns NULL if an operand is NULL or <code>expr2</code> is 0. The result is casted to long.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT 3 div 2;</span>
 1
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="double"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#double">double</a></h3>
<p>double(expr) - Casts the value <code>expr</code> to the target data type <code>double</code>.</p>
<p><br></p>
<h3 id="e"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#e">e</a></h3>
<p>e() - Returns Euler's number, e.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT e();</span>
 2.718281828459045
</code></pre>

<p><br></p>
<h3 id="element_at"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#element_at">element_at</a></h3>
<p>element_at(array, index) - Returns element of array at given (1-based) index. If index &lt; 0,
accesses elements from the last to the first. Returns NULL if the index exceeds the length
of the array.</p>
<p>element_at(map, key) - Returns value for given key, or NULL if the key is not contained in the map</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT element_at(array(1, 2, 3), 2);</span>
 2
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT element_at(map(1, <span class="hljs-string">'a'</span>, 2, <span class="hljs-string">'b'</span>), 2);</span>
 b
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="elt"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#elt">elt</a></h3>
<p>elt(n, input1, input2, ...) - Returns the <code>n</code>-th input, e.g., returns <code>input2</code> when <code>n</code> is 2.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT elt(1, <span class="hljs-string">'scala'</span>, <span class="hljs-string">'java'</span>);</span>
 scala
</code></pre>

<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="encode"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#encode">encode</a></h3>
<p>encode(str, charset) - Encodes the first argument using the second argument character set.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT encode(<span class="hljs-string">'abc'</span>, <span class="hljs-string">'utf-8'</span>);</span>
 abc
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="every"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#every">every</a></h3>
<p>every(expr) - Returns true if all values of <code>expr</code> are true.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs php">&gt; SELECT every(col) FROM VALUES (<span class="hljs-keyword">true</span>), (<span class="hljs-keyword">true</span>), (<span class="hljs-keyword">true</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-keyword">true</span>
&gt; SELECT every(col) FROM VALUES (<span class="hljs-keyword">NULL</span>), (<span class="hljs-keyword">true</span>), (<span class="hljs-keyword">true</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-keyword">true</span>
&gt; SELECT every(col) FROM VALUES (<span class="hljs-keyword">true</span>), (<span class="hljs-keyword">false</span>), (<span class="hljs-keyword">true</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-keyword">false</span>
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="exists"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#exists">exists</a></h3>
<p>exists(expr, pred) - Tests whether a predicate holds for one or more elements in the array.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs php">&gt; SELECT exists(<span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), x -&gt; x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>);
 <span class="hljs-keyword">true</span>
&gt; SELECT exists(<span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), x -&gt; x % <span class="hljs-number">2</span> == <span class="hljs-number">10</span>);
 <span class="hljs-keyword">false</span>
&gt; SELECT exists(<span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">3</span>), x -&gt; x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>);
 <span class="hljs-keyword">NULL</span>
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="exp"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#exp">exp</a></h3>
<p>exp(expr) - Returns e to the power of <code>expr</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT exp(0);</span>
 1.0
</code></pre>

<p><br></p>
<h3 id="explode"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#explode">explode</a></h3>
<p>explode(expr) - Separates the elements of array <code>expr</code> into multiple rows, or the elements of map <code>expr</code> into multiple rows and columns. Unless specified otherwise, uses the default column name <code>col</code> for elements of the array or <code>key</code> and <code>value</code> for the elements of the map.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT explode(array(10, 20));</span>
 10
 20
</code></pre>

<p><br></p>
<h3 id="explode_outer"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#explode_outer">explode_outer</a></h3>
<p>explode_outer(expr) - Separates the elements of array <code>expr</code> into multiple rows, or the elements of map <code>expr</code> into multiple rows and columns. Unless specified otherwise, uses the default column name <code>col</code> for elements of the array or <code>key</code> and <code>value</code> for the elements of the map.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT explode_outer(array(10, 20));</span>
 10
 20
</code></pre>

<p><br></p>
<h3 id="expm1"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#expm1">expm1</a></h3>
<p>expm1(expr) - Returns exp(<code>expr</code>) - 1.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT expm1(0);</span>
 0.0
</code></pre>

<p><br></p>
<h3 id="extract"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#extract">extract</a></h3>
<p>extract(field FROM source) - Extracts a part of the date/timestamp or interval source.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>field - selects which part of the source should be extracted<ul>
<li>Supported string values of <code>field</code> for dates and timestamps are(case insensitive):<ul>
<li>"YEAR", ("Y", "YEARS", "YR", "YRS") - the year field</li>
<li>"YEAROFWEEK" - the ISO 8601 week-numbering year that the datetime falls in. For example, 2005-01-02 is part of the 53rd week of year 2004, so the result is 2004</li>
<li>"QUARTER", ("QTR") - the quarter (1 - 4) of the year that the datetime falls in</li>
<li>"MONTH", ("MON", "MONS", "MONTHS") - the month field (1 - 12)</li>
<li>"WEEK", ("W", "WEEKS") - the number of the ISO 8601 week-of-week-based-year. A week is considered to start on a Monday and week 1 is the first week with &gt;3 days. In the ISO week-numbering system, it is possible for early-January dates to be part of the 52nd or 53rd week of the previous year, and for late-December dates to be part of the first week of the next year. For example, 2005-01-02 is part of the 53rd week of year 2004, while 2012-12-31 is part of the first week of 2013</li>
<li>"DAY", ("D", "DAYS") - the day of the month field (1 - 31)</li>
<li>"DAYOFWEEK",("DOW") - the day of the week for datetime as Sunday(1) to Saturday(7)</li>
<li>"DAYOFWEEK_ISO",("DOW_ISO") - ISO 8601 based day of the week for datetime as Monday(1) to Sunday(7)</li>
<li>"DOY" - the day of the year (1 - 365/366)</li>
<li>"HOUR", ("H", "HOURS", "HR", "HRS") - The hour field (0 - 23)</li>
<li>"MINUTE", ("M", "MIN", "MINS", "MINUTES") - the minutes field (0 - 59)</li>
<li>"SECOND", ("S", "SEC", "SECONDS", "SECS") - the seconds field, including fractional parts</li>
</ul>
</li>
<li>Supported string values of <code>field</code> for interval(which consists of <code>months</code>, <code>days</code>, <code>microseconds</code>) are(case insensitive):<ul>
<li>"YEAR", ("Y", "YEARS", "YR", "YRS") - the total <code>months</code> / 12</li>
<li>"MONTH", ("MON", "MONS", "MONTHS") - the total <code>months</code> % 12</li>
<li>"DAY", ("D", "DAYS") - the <code>days</code> part of interval</li>
<li>"HOUR", ("H", "HOURS", "HR", "HRS") - how many hours the <code>microseconds</code> contains</li>
<li>"MINUTE", ("M", "MIN", "MINS", "MINUTES") - how many minutes left after taking hours from <code>microseconds</code></li>
<li>"SECOND", ("S", "SEC", "SECONDS", "SECS") - how many second with fractions left after taking hours and minutes from <code>microseconds</code></li>
</ul>
</li>
</ul>
</li>
<li>source - a date/timestamp or interval column from where <code>field</code> should be extracted</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT extract(YEAR FROM TIMESTAMP <span class="hljs-string">'2019-08-12 01:00:00.123456'</span>);</span>
 2019
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT extract(week FROM timestamp<span class="hljs-string">'2019-08-12 01:00:00.123456'</span>);</span>
 33
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT extract(doy FROM DATE<span class="hljs-string">'2019-08-12'</span>);</span>
 224
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT extract(SECONDS FROM timestamp<span class="hljs-string">'2019-10-01 00:00:01.000001'</span>);</span>
 1.000001
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT extract(days FROM interval 1 year 10 months 5 days);</span>
 5
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT extract(seconds FROM interval 5 hours 30 seconds 1 milliseconds 1 microseconds);</span>
 30.001001
</code></pre>

<p><strong>Note:</strong></p>
<p>The extract function is equivalent to <code>date_part(field, source)</code>.</p>
<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="factorial"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#factorial">factorial</a></h3>
<p>factorial(expr) - Returns the factorial of <code>expr</code>. <code>expr</code> is [0..20]. Otherwise, null.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT factorial(5);</span>
 120
</code></pre>

<p><br></p>
<h3 id="filter"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#filter">filter</a></h3>
<p>filter(expr, func) - Filters the input array using the given predicate.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">filter</span>(<span class="hljs-params">array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span></span>), x -&gt; x % 2 </span>== <span class="hljs-number">1</span>);
 [<span class="hljs-meta">1,3</span>]
&gt; <span class="hljs-function">SELECT <span class="hljs-title">filter</span>(<span class="hljs-params">array(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span></span>), (<span class="hljs-params">x, i</span>) -&gt; x &gt; i)</span>;
 [<span class="hljs-meta">2,3</span>]
</code></pre>

<p><strong>Note:</strong></p>
<p>The inner function may use the index argument since 3.0.0.</p>
<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="find_in_set"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#find_in_set">find_in_set</a></h3>
<p>find_in_set(str, str_array) - Returns the index (1-based) of the given string (<code>str</code>) in the comma-delimited list (<code>str_array</code>).
Returns 0, if the string was not found or if the given string (<code>str</code>) contains a comma.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT find_in_set(<span class="hljs-string">'ab'</span>,<span class="hljs-string">'abc,b,ab,c,def'</span>);</span>
 3
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="first"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#first">first</a></h3>
<p>first(expr[, isIgnoreNull]) - Returns the first value of <code>expr</code> for a group of rows.
If <code>isIgnoreNull</code> is true, returns only non-null values.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs php">&gt; SELECT first(col) FROM VALUES (<span class="hljs-number">10</span>), (<span class="hljs-number">5</span>), (<span class="hljs-number">20</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-number">10</span>
&gt; SELECT first(col) FROM VALUES (<span class="hljs-keyword">NULL</span>), (<span class="hljs-number">5</span>), (<span class="hljs-number">20</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-keyword">NULL</span>
&gt; SELECT first(col, <span class="hljs-keyword">true</span>) FROM VALUES (<span class="hljs-keyword">NULL</span>), (<span class="hljs-number">5</span>), (<span class="hljs-number">20</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-number">5</span>
</code></pre>

<p><strong>Note:</strong></p>
<p>The function is non-deterministic because its results depends on the order of the rows
which may be non-deterministic after a shuffle.</p>
<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="first_value"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#first_value">first_value</a></h3>
<p>first_value(expr[, isIgnoreNull]) - Returns the first value of <code>expr</code> for a group of rows.
If <code>isIgnoreNull</code> is true, returns only non-null values.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs php">&gt; SELECT first_value(col) FROM VALUES (<span class="hljs-number">10</span>), (<span class="hljs-number">5</span>), (<span class="hljs-number">20</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-number">10</span>
&gt; SELECT first_value(col) FROM VALUES (<span class="hljs-keyword">NULL</span>), (<span class="hljs-number">5</span>), (<span class="hljs-number">20</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-keyword">NULL</span>
&gt; SELECT first_value(col, <span class="hljs-keyword">true</span>) FROM VALUES (<span class="hljs-keyword">NULL</span>), (<span class="hljs-number">5</span>), (<span class="hljs-number">20</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-number">5</span>
</code></pre>

<p><strong>Note:</strong></p>
<p>The function is non-deterministic because its results depends on the order of the rows
which may be non-deterministic after a shuffle.</p>
<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="flatten"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#flatten">flatten</a></h3>
<p>flatten(arrayOfArrays) - Transforms an array of arrays into a single array.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs php">&gt; SELECT flatten(<span class="hljs-keyword">array</span>(<span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), <span class="hljs-keyword">array</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)));
 [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="float"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#float">float</a></h3>
<p>float(expr) - Casts the value <code>expr</code> to the target data type <code>float</code>.</p>
<p><br></p>
<h3 id="floor"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#floor">floor</a></h3>
<p>floor(expr) - Returns the largest integer not greater than <code>expr</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT floor(-0.1);</span>
 -1
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT floor(5);</span>
 5
</code></pre>

<p><br></p>
<h3 id="forall"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#forall">forall</a></h3>
<p>forall(expr, pred) - Tests whether a predicate holds for all elements in the array.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs php">&gt; SELECT forall(<span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), x -&gt; x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>);
 <span class="hljs-keyword">false</span>
&gt; SELECT forall(<span class="hljs-keyword">array</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>), x -&gt; x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>);
 <span class="hljs-keyword">true</span>
&gt; SELECT forall(<span class="hljs-keyword">array</span>(<span class="hljs-number">1</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">3</span>), x -&gt; x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>);
 <span class="hljs-keyword">false</span>
&gt; SELECT forall(<span class="hljs-keyword">array</span>(<span class="hljs-number">2</span>, <span class="hljs-keyword">null</span>, <span class="hljs-number">8</span>), x -&gt; x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>);
 <span class="hljs-keyword">NULL</span>
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="format_number"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#format_number">format_number</a></h3>
<p>format_number(expr1, expr2) - Formats the number <code>expr1</code> like '#,###,###.##', rounded to <code>expr2</code>
decimal places. If <code>expr2</code> is 0, the result has no decimal point or fractional part.
<code>expr2</code> also accept a user specified format.
This is supposed to function like MySQL's FORMAT.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT format_number(12332.123456, 4);</span>
 12,332.1235
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT format_number(12332.123456, <span class="hljs-string">'##################.###'</span>);</span>
 12332.123
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="format_string"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#format_string">format_string</a></h3>
<p>format_string(strfmt, obj, ...) - Returns a formatted string from printf-style format strings.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs perl">&gt; SELECT format_string(<span class="hljs-string">"Hello World %d %s"</span>, <span class="hljs-number">100</span>, <span class="hljs-string">"days"</span>);
 Hello World <span class="hljs-number">100</span> days
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="from_csv"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#from_csv">from_csv</a></h3>
<p>from_csv(csvStr, schema[, options]) - Returns a struct value with the given <code>csvStr</code> and <code>schema</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">from_csv</span>(<span class="hljs-params"><span class="hljs-string">'1, 0.8'</span>, <span class="hljs-string">'a INT, b DOUBLE'</span></span>)</span>;
 {<span class="hljs-string">"a"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"b"</span>:<span class="hljs-number">0.8</span>}
&gt; <span class="hljs-function">SELECT <span class="hljs-title">from_csv</span>(<span class="hljs-params"><span class="hljs-string">'26/08/2015'</span>, <span class="hljs-string">'time Timestamp'</span>, map(<span class="hljs-string">'timestampFormat'</span>, <span class="hljs-string">'dd/MM/yyyy'</span></span>))</span>;
 {<span class="hljs-string">"time"</span>:<span class="hljs-number">2015</span><span class="hljs-number">-08</span><span class="hljs-number">-26</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>}
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="from_json"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#from_json">from_json</a></h3>
<p>from_json(jsonStr, schema[, options]) - Returns a struct value with the given <code>jsonStr</code> and <code>schema</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">from_json</span>(<span class="hljs-params"><span class="hljs-string">'{"a":1, "b":0.8}'</span>, <span class="hljs-string">'a INT, b DOUBLE'</span></span>)</span>;
 {<span class="hljs-string">"a"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"b"</span>:<span class="hljs-number">0.8</span>}
&gt; <span class="hljs-function">SELECT <span class="hljs-title">from_json</span>(<span class="hljs-params"><span class="hljs-string">'{"time":"26/08/2015"}'</span>, <span class="hljs-string">'time Timestamp'</span>, map(<span class="hljs-string">'timestampFormat'</span>, <span class="hljs-string">'dd/MM/yyyy'</span></span>))</span>;
 {<span class="hljs-string">"time"</span>:<span class="hljs-number">2015</span><span class="hljs-number">-08</span><span class="hljs-number">-26</span> <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>}
</code></pre>

<p><strong>Since:</strong> 2.2.0</p>
<p><br></p>
<h3 id="from_unixtime"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#from_unixtime">from_unixtime</a></h3>
<p>from_unixtime(unix_time, format) - Returns <code>unix_time</code> in the specified <code>format</code>.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>unix_time - UNIX Timestamp to be converted to the provided format.</li>
<li>format - Date/time format pattern to follow. See <a href="https://spark.apache.org/docs/latest/sql-ref-datetime-pattern.html">Datetime Patterns</a>
           for valid date and time format patterns.</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT from_unixtime(0, <span class="hljs-string">'yyyy-MM-dd HH:mm:ss'</span>);</span>
 1969-12-31 16:00:00
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="from_utc_timestamp"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#from_utc_timestamp">from_utc_timestamp</a></h3>
<p>from_utc_timestamp(timestamp, timezone) - Given a timestamp like '2017-07-14 02:40:00.0', interprets it as a time in UTC, and renders that time as a timestamp in the given time zone. For example, 'GMT+1' would yield '2017-07-14 03:40:00.0'.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT from_utc_timestamp(<span class="hljs-string">'2016-08-31'</span>, <span class="hljs-string">'Asia/Seoul'</span>);</span>
 2016-08-31 09:00:00
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="get_json_object"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#get_json_object">get_json_object</a></h3>
<p>get_json_object(json_txt, path) - Extracts a json object from <code>path</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT get_json_object(<span class="hljs-string">'{"a":"b"}'</span>, <span class="hljs-string">'$.a'</span>);</span>
 b
</code></pre>

<p><br></p>
<h3 id="greatest"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#greatest">greatest</a></h3>
<p>greatest(expr, ...) - Returns the greatest value of all parameters, skipping null values.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT greatest(10, 9, 2, 4, 3);</span>
 10
</code></pre>

<p><br></p>
<h3 id="grouping"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#grouping">grouping</a></h3>
<p>grouping(col) - indicates whether a specified column in a GROUP BY is aggregated or
not, returns 1 for aggregated or 0 for not aggregated in the result set.",</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT name, grouping(name), sum(age) FROM VALUES (2, <span class="hljs-string">'Alice'</span>), (5, <span class="hljs-string">'Bob'</span>) people(age, name) GROUP BY cube(name);</span>
  Bob   0   5
  Alice 0   2
  NULL  1   7
</code></pre>

<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="grouping_id"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#grouping_id">grouping_id</a></h3>
<p>grouping_id([col1[, col2 ..]]) - returns the level of grouping, equals to
<code>(grouping(c1) &lt;&lt; (n-1)) + (grouping(c2) &lt;&lt; (n-2)) + ... + grouping(cn)</code></p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs php">&gt; SELECT name, grouping_id(), sum(age), avg(height) FROM VALUES (<span class="hljs-number">2</span>, <span class="hljs-string">'Alice'</span>, <span class="hljs-number">165</span>), (<span class="hljs-number">5</span>, <span class="hljs-string">'Bob'</span>, <span class="hljs-number">180</span>) people(age, name, height) GROUP BY cube(name, height);
  <span class="hljs-keyword">NULL</span>  <span class="hljs-number">2</span>   <span class="hljs-number">5</span>   <span class="hljs-number">180.0</span>
  Alice <span class="hljs-number">0</span>   <span class="hljs-number">2</span>   <span class="hljs-number">165.0</span>
  <span class="hljs-keyword">NULL</span>  <span class="hljs-number">3</span>   <span class="hljs-number">7</span>   <span class="hljs-number">172.5</span>
  <span class="hljs-keyword">NULL</span>  <span class="hljs-number">2</span>   <span class="hljs-number">2</span>   <span class="hljs-number">165.0</span>
  Bob   <span class="hljs-number">1</span>   <span class="hljs-number">5</span>   <span class="hljs-number">180.0</span>
  Alice <span class="hljs-number">1</span>   <span class="hljs-number">2</span>   <span class="hljs-number">165.0</span>
  Bob   <span class="hljs-number">0</span>   <span class="hljs-number">5</span>   <span class="hljs-number">180.0</span>
</code></pre>

<p><strong>Note:</strong></p>
<p>Input columns should match with grouping columns exactly, or empty (means all the grouping
columns).</p>
<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="hash"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#hash">hash</a></h3>
<p>hash(expr1, expr2, ...) - Returns a hash value of the arguments.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT <span class="hljs-built_in">hash</span>(<span class="hljs-string">'Spark'</span>, array(123), 2);</span>
 -1321691492
</code></pre>

<p><br></p>
<h3 id="hex"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#hex">hex</a></h3>
<p>hex(expr) - Converts <code>expr</code> to hexadecimal.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT hex(17);</span>
 11
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT hex(<span class="hljs-string">'Spark SQL'</span>);</span>
 537061726B2053514C
</code></pre>

<p><br></p>
<h3 id="hour"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#hour">hour</a></h3>
<p>hour(timestamp) - Returns the hour component of the string/timestamp.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT hour(<span class="hljs-string">'2009-07-30 12:58:59'</span>);</span>
 12
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="hypot"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#hypot">hypot</a></h3>
<p>hypot(expr1, expr2) - Returns sqrt(<code>expr1</code><strong>2 + <code>expr2</code></strong>2).</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT hypot(3, 4);</span>
 5.0
</code></pre>

<p><br></p>
<h3 id="if"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#if">if</a></h3>
<p>if(expr1, expr2, expr3) - If <code>expr1</code> evaluates to true, then returns <code>expr2</code>; otherwise returns <code>expr3</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT <span class="hljs-keyword">if</span>(1 &lt; 2, <span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>);</span>
 a
</code></pre>

<p><br></p>
<h3 id="ifnull"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#ifnull">ifnull</a></h3>
<p>ifnull(expr1, expr2) - Returns <code>expr2</code> if <code>expr1</code> is null, or <code>expr1</code> otherwise.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">ifnull</span>(<span class="hljs-params">NULL, array(<span class="hljs-string">'2'</span></span>))</span>;
 [<span class="hljs-meta"><span class="hljs-meta-string">"2"</span></span>]
</code></pre>

<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="in"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#in">in</a></h3>
<p>expr1 in(expr2, expr3, ...) - Returns true if <code>expr</code> equals to any valN.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>expr1, expr2, expr3, ... - the arguments must be same type.</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT 1 <span class="hljs-keyword">in</span>(1, 2, 3);</span>
 true
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT 1 <span class="hljs-keyword">in</span>(2, 3, 4);</span>
 false
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT named_struct(<span class="hljs-string">'a'</span>, 1, <span class="hljs-string">'b'</span>, 2) <span class="hljs-keyword">in</span>(named_struct(<span class="hljs-string">'a'</span>, 1, <span class="hljs-string">'b'</span>, 1), named_struct(<span class="hljs-string">'a'</span>, 1, <span class="hljs-string">'b'</span>, 3));</span>
 false
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT named_struct(<span class="hljs-string">'a'</span>, 1, <span class="hljs-string">'b'</span>, 2) <span class="hljs-keyword">in</span>(named_struct(<span class="hljs-string">'a'</span>, 1, <span class="hljs-string">'b'</span>, 2), named_struct(<span class="hljs-string">'a'</span>, 1, <span class="hljs-string">'b'</span>, 3));</span>
 true
</code></pre>

<p><br></p>
<h3 id="initcap"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#initcap">initcap</a></h3>
<p>initcap(str) - Returns <code>str</code> with the first letter of each word in uppercase.
All other letters are in lowercase. Words are delimited by white space.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT initcap(<span class="hljs-string">'sPark sql'</span>);</span>
 Spark Sql
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="inline"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#inline">inline</a></h3>
<p>inline(expr) - Explodes an array of structs into a table. Uses column names col1, col2, etc. by default unless specified otherwise.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs objectivec">&gt; SELECT <span class="hljs-keyword">inline</span>(array(<span class="hljs-keyword">struct</span>(<span class="hljs-number">1</span>, <span class="hljs-string">'a'</span>), <span class="hljs-keyword">struct</span>(<span class="hljs-number">2</span>, <span class="hljs-string">'b'</span>)));
 <span class="hljs-number">1</span>  a
 <span class="hljs-number">2</span>  b
</code></pre>

<p><br></p>
<h3 id="inline_outer"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#inline_outer">inline_outer</a></h3>
<p>inline_outer(expr) - Explodes an array of structs into a table. Uses column names col1, col2, etc. by default unless specified otherwise.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">inline_outer</span>(<span class="hljs-params">array(<span class="hljs-keyword">struct</span>(<span class="hljs-number">1</span>, <span class="hljs-string">'a'</span></span>), <span class="hljs-title">struct</span>(<span class="hljs-params"><span class="hljs-number">2</span>, <span class="hljs-string">'b'</span></span>)))</span>;
 <span class="hljs-number">1</span>  a
 <span class="hljs-number">2</span>  b
</code></pre>

<p><br></p>
<h3 id="input_file_block_length"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#input_file_block_length">input_file_block_length</a></h3>
<p>input_file_block_length() - Returns the length of the block being read, or -1 if not available.</p>
<p><br></p>
<h3 id="input_file_block_start"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#input_file_block_start">input_file_block_start</a></h3>
<p>input_file_block_start() - Returns the start offset of the block being read, or -1 if not available.</p>
<p><br></p>
<h3 id="input_file_name"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#input_file_name">input_file_name</a></h3>
<p>input_file_name() - Returns the name of the file being read, or empty string if not available.</p>
<p><br></p>
<h3 id="instr"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#instr">instr</a></h3>
<p>instr(str, substr) - Returns the (1-based) index of the first occurrence of <code>substr</code> in <code>str</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT instr(<span class="hljs-string">'SparkSQL'</span>, <span class="hljs-string">'SQL'</span>);</span>
 6
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="int"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#int">int</a></h3>
<p>int(expr) - Casts the value <code>expr</code> to the target data type <code>int</code>.</p>
<p><br></p>
<h3 id="isnan"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#isnan">isnan</a></h3>
<p>isnan(expr) - Returns true if <code>expr</code> is NaN, or false otherwise.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">isnan</span>(<span class="hljs-params">cast(<span class="hljs-string">'NaN'</span> <span class="hljs-keyword">as</span> <span class="hljs-keyword">double</span></span>))</span>;
 <span class="hljs-literal">true</span>
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="isnotnull"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#isnotnull">isnotnull</a></h3>
<p>isnotnull(expr) - Returns true if <code>expr</code> is not null, or false otherwise.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cpp">&gt; <span class="hljs-function">SELECT <span class="hljs-title">isnotnull</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>;
 <span class="hljs-literal">true</span>
</code></pre>

<p><strong>Since:</strong> 1.0.0</p>
<p><br></p>
<h3 id="isnull"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#isnull">isnull</a></h3>
<p>isnull(expr) - Returns true if <code>expr</code> is null, or false otherwise.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cpp">&gt; <span class="hljs-function">SELECT <span class="hljs-title">isnull</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>;
 <span class="hljs-literal">false</span>
</code></pre>

<p><strong>Since:</strong> 1.0.0</p>
<p><br></p>
<h3 id="java_method"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#java_method">java_method</a></h3>
<p>java_method(class, method[, arg1[, arg2 ..]]) - Calls a method with reflection.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT java_method(<span class="hljs-string">'java.util.UUID'</span>, <span class="hljs-string">'randomUUID'</span>);</span>
 c33fb387-8500-4bfa-81d2-6e0e3e930df2
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT java_method(<span class="hljs-string">'java.util.UUID'</span>, <span class="hljs-string">'fromString'</span>, <span class="hljs-string">'a5cf6c42-0c85-418f-af6c-3e4e5b1328f2'</span>);</span>
 a5cf6c42-0c85-418f-af6c-3e4e5b1328f2
</code></pre>

<p><br></p>
<h3 id="json_tuple"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#json_tuple">json_tuple</a></h3>
<p>json_tuple(jsonStr, p1, p2, ..., pn) - Returns a tuple like the function get_json_object, but it takes multiple names. All the input parameters and output column types are string.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT json_tuple(<span class="hljs-string">'{"a":1, "b":2}'</span>, <span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>);</span>
 1  2
</code></pre>

<p><br></p>
<h3 id="kurtosis"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#kurtosis">kurtosis</a></h3>
<p>kurtosis(expr) - Returns the kurtosis value calculated from values of a group.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT kurtosis(col) FROM VALUES (-10), (-20), (100), (1000) AS tab(col);</span>
 -0.7014368047529627
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT kurtosis(col) FROM VALUES (1), (10), (100), (10), (1) as tab(col);</span>
 0.19432323191699075
</code></pre>

<p><strong>Since:</strong> 1.6.0</p>
<p><br></p>
<h3 id="lag"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#lag">lag</a></h3>
<p>lag(input[, offset[, default]]) - Returns the value of <code>input</code> at the <code>offset</code>th row
before the current row in the window. The default value of <code>offset</code> is 1 and the default
value of <code>default</code> is null. If the value of <code>input</code> at the <code>offset</code>th row is null,
null is returned. If there is no such offset row (e.g., when the offset is 1, the first
row of the window does not have any previous row), <code>default</code> is returned.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>input - a string expression to evaluate <code>offset</code> rows before the current row.</li>
<li>offset - an int expression which is rows to jump back in the partition.</li>
<li>default - a string expression which is to use when the offset row does not exist.</li>
</ul>
<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="last"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#last">last</a></h3>
<p>last(expr[, isIgnoreNull]) - Returns the last value of <code>expr</code> for a group of rows.
If <code>isIgnoreNull</code> is true, returns only non-null values</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs php">&gt; SELECT last(col) FROM VALUES (<span class="hljs-number">10</span>), (<span class="hljs-number">5</span>), (<span class="hljs-number">20</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-number">20</span>
&gt; SELECT last(col) FROM VALUES (<span class="hljs-number">10</span>), (<span class="hljs-number">5</span>), (<span class="hljs-keyword">NULL</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-keyword">NULL</span>
&gt; SELECT last(col, <span class="hljs-keyword">true</span>) FROM VALUES (<span class="hljs-number">10</span>), (<span class="hljs-number">5</span>), (<span class="hljs-keyword">NULL</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-number">5</span>
</code></pre>

<p><strong>Note:</strong></p>
<p>The function is non-deterministic because its results depends on the order of the rows
which may be non-deterministic after a shuffle.</p>
<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="last_day"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#last_day">last_day</a></h3>
<p>last_day(date) - Returns the last day of the month which the date belongs to.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT last_day(<span class="hljs-string">'2009-01-12'</span>);</span>
 2009-01-31
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="last_value"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#last_value">last_value</a></h3>
<p>last_value(expr[, isIgnoreNull]) - Returns the last value of <code>expr</code> for a group of rows.
If <code>isIgnoreNull</code> is true, returns only non-null values</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs php">&gt; SELECT last_value(col) FROM VALUES (<span class="hljs-number">10</span>), (<span class="hljs-number">5</span>), (<span class="hljs-number">20</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-number">20</span>
&gt; SELECT last_value(col) FROM VALUES (<span class="hljs-number">10</span>), (<span class="hljs-number">5</span>), (<span class="hljs-keyword">NULL</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-keyword">NULL</span>
&gt; SELECT last_value(col, <span class="hljs-keyword">true</span>) FROM VALUES (<span class="hljs-number">10</span>), (<span class="hljs-number">5</span>), (<span class="hljs-keyword">NULL</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-number">5</span>
</code></pre>

<p><strong>Note:</strong></p>
<p>The function is non-deterministic because its results depends on the order of the rows
which may be non-deterministic after a shuffle.</p>
<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="lcase"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#lcase">lcase</a></h3>
<p>lcase(str) - Returns <code>str</code> with all characters changed to lowercase.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT lcase(<span class="hljs-string">'SparkSql'</span>);</span>
 sparksql
</code></pre>

<p><strong>Since:</strong> 1.0.1</p>
<p><br></p>
<h3 id="lead"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#lead">lead</a></h3>
<p>lead(input[, offset[, default]]) - Returns the value of <code>input</code> at the <code>offset</code>th row
after the current row in the window. The default value of <code>offset</code> is 1 and the default
value of <code>default</code> is null. If the value of <code>input</code> at the <code>offset</code>th row is null,
null is returned. If there is no such an offset row (e.g., when the offset is 1, the last
row of the window does not have any subsequent row), <code>default</code> is returned.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>input - a string expression to evaluate <code>offset</code> rows after the current row.</li>
<li>offset - an int expression which is rows to jump ahead in the partition.</li>
<li>default - a string expression which is to use when the offset is larger than the window.
    The default value is null.</li>
</ul>
<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="least"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#least">least</a></h3>
<p>least(expr, ...) - Returns the least value of all parameters, skipping null values.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT least(10, 9, 2, 4, 3);</span>
 2
</code></pre>

<p><br></p>
<h3 id="left"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#left">left</a></h3>
<p>left(str, len) - Returns the leftmost <code>len</code>(<code>len</code> can be string type) characters from the string <code>str</code>,if <code>len</code> is less or equal than 0 the result is an empty string.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT left(<span class="hljs-string">'Spark SQL'</span>, 3);</span>
 Spa
</code></pre>

<p><strong>Since:</strong> 2.3.0</p>
<p><br></p>
<h3 id="length"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#length">length</a></h3>
<p>length(expr) - Returns the character length of string data or number of bytes of binary data. The length of string data includes the trailing spaces. The length of binary data includes binary zeros.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT length(<span class="hljs-string">'Spark SQL '</span>);</span>
 10
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT CHAR_LENGTH(<span class="hljs-string">'Spark SQL '</span>);</span>
 10
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT CHARACTER_LENGTH(<span class="hljs-string">'Spark SQL '</span>);</span>
 10
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="levenshtein"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#levenshtein">levenshtein</a></h3>
<p>levenshtein(str1, str2) - Returns the Levenshtein distance between the two given strings.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT levenshtein(<span class="hljs-string">'kitten'</span>, <span class="hljs-string">'sitting'</span>);</span>
 3
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="like"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#like">like</a></h3>
<p>str like pattern[ ESCAPE escape] - Returns true if str matches <code>pattern</code> with <code>escape</code>, null if any arguments are null, false otherwise.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>str - a string expression</li>
<li>
<p>pattern - a string expression. The pattern is a string which is matched literally, with
    exception to the following special symbols:</p>
<p>_ matches any one character in the input (similar to . in posix regular expressions)</p>
<p>% matches zero or more characters in the input (similar to .* in posix regular
expressions)</p>
<p>Since Spark 2.0, string literals are unescaped in our SQL parser. For example, in order
to match "\abc", the pattern should be "\abc".</p>
<p>When SQL config 'spark.sql.parser.escapedStringLiterals' is enabled, it fallbacks
to Spark 1.6 behavior regarding string literal parsing. For example, if the config is
enabled, the pattern to match "\abc" should be "\abc".
* escape - an character added since Spark 3.0. The default escape character is the '\'.
If an escape character precedes a special symbol or another escape character, the
following character is matched literally. It is invalid to escape any other character.</p>
</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT like(<span class="hljs-string">'Spark'</span>, <span class="hljs-string">'_park'</span>);</span>
true
<span class="hljs-meta">&gt;</span><span class="bash"> SET spark.sql.parser.escapedStringLiterals=<span class="hljs-literal">true</span>;</span>
spark.sql.parser.escapedStringLiterals  true
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT <span class="hljs-string">'%SystemDrive%\Users\John'</span> like <span class="hljs-string">'\%SystemDrive\%\\Users%'</span>;</span>
true
<span class="hljs-meta">&gt;</span><span class="bash"> SET spark.sql.parser.escapedStringLiterals=<span class="hljs-literal">false</span>;</span>
spark.sql.parser.escapedStringLiterals  false
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT <span class="hljs-string">'%SystemDrive%\\Users\\John'</span> like <span class="hljs-string">'\%SystemDrive\%\\\\Users%'</span>;</span>
true
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT <span class="hljs-string">'%SystemDrive%/Users/John'</span> like <span class="hljs-string">'/%SystemDrive/%//Users%'</span> ESCAPE <span class="hljs-string">'/'</span>;</span>
true
</code></pre>

<p><strong>Note:</strong></p>
<p>Use RLIKE to match with standard regular expressions.</p>
<p><strong>Since:</strong> 1.0.0</p>
<p><br></p>
<h3 id="ln"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#ln">ln</a></h3>
<p>ln(expr) - Returns the natural logarithm (base e) of <code>expr</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT ln(1);</span>
 0.0
</code></pre>

<p><br></p>
<h3 id="locate"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#locate">locate</a></h3>
<p>locate(substr, str[, pos]) - Returns the position of the first occurrence of <code>substr</code> in <code>str</code> after position <code>pos</code>.
The given <code>pos</code> and return value are 1-based.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT locate(<span class="hljs-string">'bar'</span>, <span class="hljs-string">'foobarbar'</span>);</span>
 4
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT locate(<span class="hljs-string">'bar'</span>, <span class="hljs-string">'foobarbar'</span>, 5);</span>
 7
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT POSITION(<span class="hljs-string">'bar'</span> IN <span class="hljs-string">'foobarbar'</span>);</span>
 4
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="log"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#log">log</a></h3>
<p>log(base, expr) - Returns the logarithm of <code>expr</code> with <code>base</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT <span class="hljs-built_in">log</span>(10, 100);</span>
 2.0
</code></pre>

<p><br></p>
<h3 id="log10"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#log10">log10</a></h3>
<p>log10(expr) - Returns the logarithm of <code>expr</code> with base 10.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT log10(10);</span>
 1.0
</code></pre>

<p><br></p>
<h3 id="log1p"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#log1p">log1p</a></h3>
<p>log1p(expr) - Returns log(1 + <code>expr</code>).</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT log1p(0);</span>
 0.0
</code></pre>

<p><br></p>
<h3 id="log2"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#log2">log2</a></h3>
<p>log2(expr) - Returns the logarithm of <code>expr</code> with base 2.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT log2(2);</span>
 1.0
</code></pre>

<p><br></p>
<h3 id="lower"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#lower">lower</a></h3>
<p>lower(str) - Returns <code>str</code> with all characters changed to lowercase.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT lower(<span class="hljs-string">'SparkSql'</span>);</span>
 sparksql
</code></pre>

<p><strong>Since:</strong> 1.0.1</p>
<p><br></p>
<h3 id="lpad"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#lpad">lpad</a></h3>
<p>lpad(str, len[, pad]) - Returns <code>str</code>, left-padded with <code>pad</code> to a length of <code>len</code>.
If <code>str</code> is longer than <code>len</code>, the return value is shortened to <code>len</code> characters.
If <code>pad</code> is not specified, <code>str</code> will be padded to the left with space characters.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT lpad(<span class="hljs-string">'hi'</span>, 5, <span class="hljs-string">'??'</span>);</span>
 ???hi
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT lpad(<span class="hljs-string">'hi'</span>, 1, <span class="hljs-string">'??'</span>);</span>
 h
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT lpad(<span class="hljs-string">'hi'</span>, 5);</span>
    hi
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="ltrim"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#ltrim">ltrim</a></h3>
<p>ltrim(str) - Removes the leading space characters from <code>str</code>.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>str - a string expression</li>
<li>trimStr - the trim string characters to trim, the default value is a single space</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT ltrim(<span class="hljs-string">'    SparkSQL   '</span>);</span>
 SparkSQL
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="make_date"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#make_date">make_date</a></h3>
<p>make_date(year, month, day) - Create date from year, month and day fields.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>year - the year to represent, from 1 to 9999</li>
<li>month - the month-of-year to represent, from 1 (January) to 12 (December)</li>
<li>day - the day-of-month to represent, from 1 to 31</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cpp">&gt; <span class="hljs-function">SELECT <span class="hljs-title">make_date</span><span class="hljs-params">(<span class="hljs-number">2013</span>, <span class="hljs-number">7</span>, <span class="hljs-number">15</span>)</span></span>;
 <span class="hljs-number">2013</span><span class="hljs-number">-07</span><span class="hljs-number">-15</span>
&gt; <span class="hljs-function">SELECT <span class="hljs-title">make_date</span><span class="hljs-params">(<span class="hljs-number">2019</span>, <span class="hljs-number">13</span>, <span class="hljs-number">1</span>)</span></span>;
 <span class="hljs-literal">NULL</span>
&gt; <span class="hljs-function">SELECT <span class="hljs-title">make_date</span><span class="hljs-params">(<span class="hljs-number">2019</span>, <span class="hljs-number">7</span>, <span class="hljs-literal">NULL</span>)</span></span>;
 <span class="hljs-literal">NULL</span>
&gt; <span class="hljs-function">SELECT <span class="hljs-title">make_date</span><span class="hljs-params">(<span class="hljs-number">2019</span>, <span class="hljs-number">2</span>, <span class="hljs-number">30</span>)</span></span>;
 <span class="hljs-literal">NULL</span>
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="make_interval"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#make_interval">make_interval</a></h3>
<p>make_interval(years, months, weeks, days, hours, mins, secs) - Make interval from years, months, weeks, days, hours, mins and secs.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>years - the number of years, positive or negative</li>
<li>months - the number of months, positive or negative</li>
<li>weeks - the number of weeks, positive or negative</li>
<li>days - the number of days, positive or negative</li>
<li>hours - the number of hours, positive or negative</li>
<li>mins - the number of minutes, positive or negative</li>
<li>secs - the number of seconds with the fractional part in microsecond precision.</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT make_interval(100, 11, 1, 1, 12, 30, 01.001001);</span>
 100 years 11 months 8 days 12 hours 30 minutes 1.001001 seconds
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT make_interval(100, null, 3);</span>
 NULL
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="make_timestamp"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#make_timestamp">make_timestamp</a></h3>
<p>make_timestamp(year, month, day, hour, min, sec[, timezone]) - Create timestamp from year, month, day, hour, min, sec and timezone fields.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>year - the year to represent, from 1 to 9999</li>
<li>month - the month-of-year to represent, from 1 (January) to 12 (December)</li>
<li>day - the day-of-month to represent, from 1 to 31</li>
<li>hour - the hour-of-day to represent, from 0 to 23</li>
<li>min - the minute-of-hour to represent, from 0 to 59</li>
<li>sec - the second-of-minute and its micro-fraction to represent, from
        0 to 60. If the sec argument equals to 60, the seconds field is set
        to 0 and 1 minute is added to the final timestamp.</li>
<li>timezone - the time zone identifier. For example, CET, UTC and etc.</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT make_timestamp(2014, 12, 28, 6, 30, 45.887);</span>
 2014-12-28 06:30:45.887
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT make_timestamp(2014, 12, 28, 6, 30, 45.887, <span class="hljs-string">'CET'</span>);</span>
 2014-12-27 21:30:45.887
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT make_timestamp(2019, 6, 30, 23, 59, 60);</span>
 2019-07-01 00:00:00
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT make_timestamp(2019, 13, 1, 10, 11, 12, <span class="hljs-string">'PST'</span>);</span>
 NULL
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT make_timestamp(null, 7, 22, 15, 30, 0);</span>
 NULL
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="map"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#map">map</a></h3>
<p>map(key0, value0, key1, value1, ...) - Creates a map with the given key/value pairs.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cpp">&gt; <span class="hljs-function">SELECT <span class="hljs-title">map</span><span class="hljs-params">(<span class="hljs-number">1.0</span>, <span class="hljs-string">'2'</span>, <span class="hljs-number">3.0</span>, <span class="hljs-string">'4'</span>)</span></span>;
 {<span class="hljs-number">1.0</span>:<span class="hljs-string">"2"</span>,<span class="hljs-number">3.0</span>:<span class="hljs-string">"4"</span>}
</code></pre>

<p><br></p>
<h3 id="map_concat"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#map_concat">map_concat</a></h3>
<p>map_concat(map, ...) - Returns the union of all the given maps</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs perl">&gt; SELECT map_concat(<span class="hljs-keyword">map</span>(<span class="hljs-number">1</span>, <span class="hljs-string">'a'</span>, <span class="hljs-number">2</span>, <span class="hljs-string">'b'</span>), <span class="hljs-keyword">map</span>(<span class="hljs-number">3</span>, <span class="hljs-string">'c'</span>));
 {<span class="hljs-number">1</span>:<span class="hljs-string">"a"</span>,<span class="hljs-number">2</span>:<span class="hljs-string">"b"</span>,<span class="hljs-number">3</span>:<span class="hljs-string">"c"</span>}
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="map_entries"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#map_entries">map_entries</a></h3>
<p>map_entries(map) - Returns an unordered array of all entries in the given map.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">map_entries</span>(<span class="hljs-params">map(<span class="hljs-number">1</span>, <span class="hljs-string">'a'</span>, <span class="hljs-number">2</span>, <span class="hljs-string">'b'</span></span>))</span>;
 [<span class="hljs-meta">{<span class="hljs-meta-string">"key"</span>:1,<span class="hljs-meta-string">"value"</span>:<span class="hljs-meta-string">"a"</span>},{<span class="hljs-meta-string">"key"</span>:2,<span class="hljs-meta-string">"value"</span>:<span class="hljs-meta-string">"b"</span>}</span>]
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="map_filter"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#map_filter">map_filter</a></h3>
<p>map_filter(expr, func) - Filters entries in a map using the function.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs coffeescript">&gt; SELECT map_filter(map(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">-1</span>), <span class="hljs-function"><span class="hljs-params">(k, v)</span> -&gt;</span> k &gt; v);
 {<span class="hljs-number">1</span>:<span class="hljs-number">0</span>,<span class="hljs-number">3</span>:<span class="hljs-number">-1</span>}
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="map_from_arrays"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#map_from_arrays">map_from_arrays</a></h3>
<p>map_from_arrays(keys, values) - Creates a map with a pair of the given key/value arrays. All elements
in keys should not be null</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs php">&gt; SELECT map_from_arrays(<span class="hljs-keyword">array</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">3.0</span>), <span class="hljs-keyword">array</span>(<span class="hljs-string">'2'</span>, <span class="hljs-string">'4'</span>));
 {<span class="hljs-number">1.0</span>:<span class="hljs-string">"2"</span>,<span class="hljs-number">3.0</span>:<span class="hljs-string">"4"</span>}
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="map_from_entries"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#map_from_entries">map_from_entries</a></h3>
<p>map_from_entries(arrayOfEntries) - Returns a map created from the given array of entries.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">map_from_entries</span>(<span class="hljs-params">array(<span class="hljs-keyword">struct</span>(<span class="hljs-number">1</span>, <span class="hljs-string">'a'</span></span>), <span class="hljs-title">struct</span>(<span class="hljs-params"><span class="hljs-number">2</span>, <span class="hljs-string">'b'</span></span>)))</span>;
 {<span class="hljs-number">1</span>:<span class="hljs-string">"a"</span>,<span class="hljs-number">2</span>:<span class="hljs-string">"b"</span>}
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="map_keys"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#map_keys">map_keys</a></h3>
<p>map_keys(map) - Returns an unordered array containing the keys of the map.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">map_keys</span>(<span class="hljs-params">map(<span class="hljs-number">1</span>, <span class="hljs-string">'a'</span>, <span class="hljs-number">2</span>, <span class="hljs-string">'b'</span></span>))</span>;
 [<span class="hljs-meta">1,2</span>]
</code></pre>

<p><br></p>
<h3 id="map_values"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#map_values">map_values</a></h3>
<p>map_values(map) - Returns an unordered array containing the values of the map.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">map_values</span>(<span class="hljs-params">map(<span class="hljs-number">1</span>, <span class="hljs-string">'a'</span>, <span class="hljs-number">2</span>, <span class="hljs-string">'b'</span></span>))</span>;
 [<span class="hljs-meta"><span class="hljs-meta-string">"a"</span>,<span class="hljs-meta-string">"b"</span></span>]
</code></pre>

<p><br></p>
<h3 id="map_zip_with"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#map_zip_with">map_zip_with</a></h3>
<p>map_zip_with(map1, map2, function) - Merges two given maps into a single map by applying
function to the pair of values with the same key. For keys only presented in one map,
NULL will be passed as the value for the missing key. If an input map contains duplicated
keys, only the first entry of the duplicated key is passed into the lambda function.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs coffeescript">&gt; SELECT map_zip_with(map(<span class="hljs-number">1</span>, <span class="hljs-string">'a'</span>, <span class="hljs-number">2</span>, <span class="hljs-string">'b'</span>), map(<span class="hljs-number">1</span>, <span class="hljs-string">'x'</span>, <span class="hljs-number">2</span>, <span class="hljs-string">'y'</span>), <span class="hljs-function"><span class="hljs-params">(k, v1, v2)</span> -&gt;</span> concat(v1, v2));
 {<span class="hljs-number">1</span>:<span class="hljs-string">"ax"</span>,<span class="hljs-number">2</span>:<span class="hljs-string">"by"</span>}
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="max"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#max">max</a></h3>
<p>max(expr) - Returns the maximum value of <code>expr</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT max(col) FROM VALUES (10), (50), (20) AS tab(col);</span>
 50
</code></pre>

<p><strong>Since:</strong> 1.0.0</p>
<p><br></p>
<h3 id="max_by"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#max_by">max_by</a></h3>
<p>max_by(x, y) - Returns the value of <code>x</code> associated with the maximum value of <code>y</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT max_by(x, y) FROM VALUES ((<span class="hljs-string">'a'</span>, 10)), ((<span class="hljs-string">'b'</span>, 50)), ((<span class="hljs-string">'c'</span>, 20)) AS tab(x, y);</span>
 b
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="md5"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#md5">md5</a></h3>
<p>md5(expr) - Returns an MD5 128-bit checksum as a hex string of <code>expr</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT md5(<span class="hljs-string">'Spark'</span>);</span>
 8cde774d6f7333752ed72cacddb05126
</code></pre>

<p><br></p>
<h3 id="mean"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#mean">mean</a></h3>
<p>mean(expr) - Returns the mean calculated from values of a group.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT mean(col) FROM VALUES (1), (2), (3) AS tab(col);</span>
 2.0
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT mean(col) FROM VALUES (1), (2), (NULL) AS tab(col);</span>
 1.5
</code></pre>

<p><strong>Since:</strong> 1.0.0</p>
<p><br></p>
<h3 id="min"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#min">min</a></h3>
<p>min(expr) - Returns the minimum value of <code>expr</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT min(col) FROM VALUES (10), (-1), (20) AS tab(col);</span>
 -1
</code></pre>

<p><strong>Since:</strong> 1.0.0</p>
<p><br></p>
<h3 id="min_by"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#min_by">min_by</a></h3>
<p>min_by(x, y) - Returns the value of <code>x</code> associated with the minimum value of <code>y</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT min_by(x, y) FROM VALUES ((<span class="hljs-string">'a'</span>, 10)), ((<span class="hljs-string">'b'</span>, 50)), ((<span class="hljs-string">'c'</span>, 20)) AS tab(x, y);</span>
 a
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="minute"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#minute">minute</a></h3>
<p>minute(timestamp) - Returns the minute component of the string/timestamp.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT minute(<span class="hljs-string">'2009-07-30 12:58:59'</span>);</span>
 58
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="mod"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#mod">mod</a></h3>
<p>expr1 mod expr2 - Returns the remainder after <code>expr1</code>/<code>expr2</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs css">&gt; <span class="hljs-selector-tag">SELECT</span> 2 % 1<span class="hljs-selector-class">.8</span>;
 0<span class="hljs-selector-class">.2</span>
&gt; <span class="hljs-selector-tag">SELECT</span> <span class="hljs-selector-tag">MOD</span>(2, 1<span class="hljs-selector-class">.8</span>);
 0<span class="hljs-selector-class">.2</span>
</code></pre>

<p><br></p>
<h3 id="monotonically_increasing_id"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#monotonically_increasing_id">monotonically_increasing_id</a></h3>
<p>monotonically_increasing_id() - Returns monotonically increasing 64-bit integers. The generated ID is guaranteed
to be monotonically increasing and unique, but not consecutive. The current implementation
puts the partition ID in the upper 31 bits, and the lower 33 bits represent the record number
within each partition. The assumption is that the data frame has less than 1 billion
partitions, and each partition has less than 8 billion records.
The function is non-deterministic because its result depends on partition IDs.</p>
<p><br></p>
<h3 id="month"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#month">month</a></h3>
<p>month(date) - Returns the month component of the date/timestamp.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT month(<span class="hljs-string">'2016-07-30'</span>);</span>
 7
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="months_between"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#months_between">months_between</a></h3>
<p>months_between(timestamp1, timestamp2[, roundOff]) - If <code>timestamp1</code> is later than <code>timestamp2</code>, then the result
is positive. If <code>timestamp1</code> and <code>timestamp2</code> are on the same day of month, or both
are the last day of month, time of day will be ignored. Otherwise, the difference is
calculated based on 31 days per month, and rounded to 8 digits unless roundOff=false.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT months_between(<span class="hljs-string">'1997-02-28 10:30:00'</span>, <span class="hljs-string">'1996-10-30'</span>);</span>
 3.94959677
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT months_between(<span class="hljs-string">'1997-02-28 10:30:00'</span>, <span class="hljs-string">'1996-10-30'</span>, <span class="hljs-literal">false</span>);</span>
 3.9495967741935485
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="named_struct"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#named_struct">named_struct</a></h3>
<p>named_struct(name1, val1, name2, val2, ...) - Creates a struct with the given field names and values.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cpp">&gt; <span class="hljs-function">SELECT <span class="hljs-title">named_struct</span><span class="hljs-params">(<span class="hljs-string">"a"</span>, <span class="hljs-number">1</span>, <span class="hljs-string">"b"</span>, <span class="hljs-number">2</span>, <span class="hljs-string">"c"</span>, <span class="hljs-number">3</span>)</span></span>;
 {<span class="hljs-string">"a"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"b"</span>:<span class="hljs-number">2</span>,<span class="hljs-string">"c"</span>:<span class="hljs-number">3</span>}
</code></pre>

<p><br></p>
<h3 id="nanvl"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#nanvl">nanvl</a></h3>
<p>nanvl(expr1, expr2) - Returns <code>expr1</code> if it's not NaN, or <code>expr2</code> otherwise.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">nanvl</span>(<span class="hljs-params">cast(<span class="hljs-string">'NaN'</span> <span class="hljs-keyword">as</span> <span class="hljs-keyword">double</span></span>), 123)</span>;
 <span class="hljs-number">123.0</span>
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="negative"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#negative">negative</a></h3>
<p>negative(expr) - Returns the negated value of <code>expr</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT negative(1);</span>
 -1
</code></pre>

<p><br></p>
<h3 id="next_day"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#next_day">next_day</a></h3>
<p>next_day(start_date, day_of_week) - Returns the first date which is later than <code>start_date</code> and named as indicated.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT next_day(<span class="hljs-string">'2015-01-14'</span>, <span class="hljs-string">'TU'</span>);</span>
 2015-01-20
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="not"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#not">not</a></h3>
<p>not expr - Logical not.</p>
<p><br></p>
<h3 id="now"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#now">now</a></h3>
<p>now() - Returns the current timestamp at the start of query evaluation.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs css">&gt; <span class="hljs-selector-tag">SELECT</span> <span class="hljs-selector-tag">now</span>();
 2020<span class="hljs-selector-tag">-04-25</span> 15<span class="hljs-selector-pseudo">:49</span><span class="hljs-selector-pseudo">:11.914</span>
</code></pre>

<p><strong>Since:</strong> 1.6.0</p>
<p><br></p>
<h3 id="ntile"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#ntile">ntile</a></h3>
<p>ntile(n) - Divides the rows for each window partition into <code>n</code> buckets ranging
from 1 to at most <code>n</code>.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>buckets - an int expression which is number of buckets to divide the rows in.
    Default value is 1.</li>
</ul>
<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="nullif"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#nullif">nullif</a></h3>
<p>nullif(expr1, expr2) - Returns null if <code>expr1</code> equals to <code>expr2</code>, or <code>expr1</code> otherwise.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cpp">&gt; <span class="hljs-function">SELECT <span class="hljs-title">nullif</span><span class="hljs-params">(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)</span></span>;
 <span class="hljs-literal">NULL</span>
</code></pre>

<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="nvl"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#nvl">nvl</a></h3>
<p>nvl(expr1, expr2) - Returns <code>expr2</code> if <code>expr1</code> is null, or <code>expr1</code> otherwise.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">nvl</span>(<span class="hljs-params">NULL, array(<span class="hljs-string">'2'</span></span>))</span>;
 [<span class="hljs-meta"><span class="hljs-meta-string">"2"</span></span>]
</code></pre>

<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="nvl2"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#nvl2">nvl2</a></h3>
<p>nvl2(expr1, expr2, expr3) - Returns <code>expr2</code> if <code>expr1</code> is not null, or <code>expr3</code> otherwise.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cpp">&gt; <span class="hljs-function">SELECT <span class="hljs-title">nvl2</span><span class="hljs-params">(<span class="hljs-literal">NULL</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)</span></span>;
 <span class="hljs-number">1</span>
</code></pre>

<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="octet_length"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#octet_length">octet_length</a></h3>
<p>octet_length(expr) - Returns the byte length of string data or number of bytes of binary data.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT octet_length(<span class="hljs-string">'Spark SQL'</span>);</span>
 9
</code></pre>

<p><strong>Since:</strong> 2.3.0</p>
<p><br></p>
<h3 id="or"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#or">or</a></h3>
<p>expr1 or expr2 - Logical OR.</p>
<p><br></p>
<h3 id="overlay"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#overlay">overlay</a></h3>
<p>overlay(input, replace, pos[, len]) - Replace <code>input</code> with <code>replace</code> that starts at <code>pos</code> and is of length <code>len</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT overlay(<span class="hljs-string">'Spark SQL'</span> PLACING <span class="hljs-string">'_'</span> FROM 6);</span>
 Spark_SQL
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT overlay(<span class="hljs-string">'Spark SQL'</span> PLACING <span class="hljs-string">'CORE'</span> FROM 7);</span>
 Spark CORE
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT overlay(<span class="hljs-string">'Spark SQL'</span> PLACING <span class="hljs-string">'ANSI '</span> FROM 7 FOR 0);</span>
 Spark ANSI SQL
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT overlay(<span class="hljs-string">'Spark SQL'</span> PLACING <span class="hljs-string">'tructured'</span> FROM 2 FOR 4);</span>
 Structured SQL
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT overlay(encode(<span class="hljs-string">'Spark SQL'</span>, <span class="hljs-string">'utf-8'</span>) PLACING encode(<span class="hljs-string">'_'</span>, <span class="hljs-string">'utf-8'</span>) FROM 6);</span>
 Spark_SQL
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT overlay(encode(<span class="hljs-string">'Spark SQL'</span>, <span class="hljs-string">'utf-8'</span>) PLACING encode(<span class="hljs-string">'CORE'</span>, <span class="hljs-string">'utf-8'</span>) FROM 7);</span>
 Spark CORE
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT overlay(encode(<span class="hljs-string">'Spark SQL'</span>, <span class="hljs-string">'utf-8'</span>) PLACING encode(<span class="hljs-string">'ANSI '</span>, <span class="hljs-string">'utf-8'</span>) FROM 7 FOR 0);</span>
 Spark ANSI SQL
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT overlay(encode(<span class="hljs-string">'Spark SQL'</span>, <span class="hljs-string">'utf-8'</span>) PLACING encode(<span class="hljs-string">'tructured'</span>, <span class="hljs-string">'utf-8'</span>) FROM 2 FOR 4);</span>
 Structured SQL
</code></pre>

<p><br></p>
<h3 id="parse_url"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#parse_url">parse_url</a></h3>
<p>parse_url(url, partToExtract[, key]) - Extracts a part from a URL.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT parse_url(<span class="hljs-string">'http://spark.apache.org/path?query=1'</span>, <span class="hljs-string">'HOST'</span>);</span>
 spark.apache.org
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT parse_url(<span class="hljs-string">'http://spark.apache.org/path?query=1'</span>, <span class="hljs-string">'QUERY'</span>);</span>
 query=1
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT parse_url(<span class="hljs-string">'http://spark.apache.org/path?query=1'</span>, <span class="hljs-string">'QUERY'</span>, <span class="hljs-string">'query'</span>);</span>
 1
</code></pre>

<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="percent_rank"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#percent_rank">percent_rank</a></h3>
<p>percent_rank() - Computes the percentage ranking of a value in a group of values.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>children - this is to base the rank on; a change in the value of one the children will
    trigger a change in rank. This is an internal parameter and will be assigned by the
    Analyser.</li>
</ul>
<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="percentile"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#percentile">percentile</a></h3>
<p>percentile(col, percentage [, frequency]) - Returns the exact percentile value of numeric column
<code>col</code> at the given percentage. The value of percentage must be between 0.0 and 1.0. The
value of frequency should be positive integral</p>
<p>percentile(col, array(percentage1 [, percentage2]...) [, frequency]) - Returns the exact
percentile value array of numeric column <code>col</code> at the given percentage(s). Each value
of the percentage array must be between 0.0 and 1.0. The value of frequency should be
positive integral</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs css">&gt; <span class="hljs-selector-tag">SELECT</span> <span class="hljs-selector-tag">percentile</span>(<span class="hljs-selector-tag">col</span>, 0<span class="hljs-selector-class">.3</span>) <span class="hljs-selector-tag">FROM</span> <span class="hljs-selector-tag">VALUES</span> (0), (10) <span class="hljs-selector-tag">AS</span> <span class="hljs-selector-tag">tab</span>(<span class="hljs-selector-tag">col</span>);
 3<span class="hljs-selector-class">.0</span>
&gt; <span class="hljs-selector-tag">SELECT</span> <span class="hljs-selector-tag">percentile</span>(<span class="hljs-selector-tag">col</span>, <span class="hljs-selector-tag">array</span>(0<span class="hljs-selector-class">.25</span>, 0<span class="hljs-selector-class">.75</span>)) <span class="hljs-selector-tag">FROM</span> <span class="hljs-selector-tag">VALUES</span> (0), (10) <span class="hljs-selector-tag">AS</span> <span class="hljs-selector-tag">tab</span>(<span class="hljs-selector-tag">col</span>);
 <span class="hljs-selector-attr">[2.5,7.5]</span>
</code></pre>

<p><strong>Since:</strong> 2.1.0</p>
<p><br></p>
<h3 id="percentile_approx"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#percentile_approx">percentile_approx</a></h3>
<p>percentile_approx(col, percentage [, accuracy]) - Returns the approximate percentile value of numeric
column <code>col</code> at the given percentage. The value of percentage must be between 0.0
and 1.0. The <code>accuracy</code> parameter (default: 10000) is a positive numeric literal which
controls approximation accuracy at the cost of memory. Higher value of <code>accuracy</code> yields
better accuracy, <code>1.0/accuracy</code> is the relative error of the approximation.
When <code>percentage</code> is an array, each value of the percentage array must be between 0.0 and 1.0.
In this case, returns the approximate percentile array of column <code>col</code> at the given
percentage array.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs css">&gt; <span class="hljs-selector-tag">SELECT</span> <span class="hljs-selector-tag">percentile_approx</span>(10<span class="hljs-selector-class">.0</span>, <span class="hljs-selector-tag">array</span>(0<span class="hljs-selector-class">.5</span>, 0<span class="hljs-selector-class">.4</span>, 0<span class="hljs-selector-class">.1</span>), 100);
 <span class="hljs-selector-attr">[10.0,10.0,10.0]</span>
&gt; <span class="hljs-selector-tag">SELECT</span> <span class="hljs-selector-tag">percentile_approx</span>(10<span class="hljs-selector-class">.0</span>, 0<span class="hljs-selector-class">.5</span>, 100);
 10<span class="hljs-selector-class">.0</span>
</code></pre>

<p><strong>Since:</strong> 2.1.0</p>
<p><br></p>
<h3 id="pi"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#pi">pi</a></h3>
<p>pi() - Returns pi.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT pi();</span>
 3.141592653589793
</code></pre>

<p><br></p>
<h3 id="pmod"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#pmod">pmod</a></h3>
<p>pmod(expr1, expr2) - Returns the positive value of <code>expr1</code> mod <code>expr2</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT pmod(10, 3);</span>
 1
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT pmod(-10, 3);</span>
 2
</code></pre>

<p><br></p>
<h3 id="posexplode"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#posexplode">posexplode</a></h3>
<p>posexplode(expr) - Separates the elements of array <code>expr</code> into multiple rows with positions, or the elements of map <code>expr</code> into multiple rows and columns with positions. Unless specified otherwise, uses the column name <code>pos</code> for position, <code>col</code> for elements of the array or <code>key</code> and <code>value</code> for elements of the map.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT posexplode(array(10,20));</span>
 0  10
 1  20
</code></pre>

<p><br></p>
<h3 id="posexplode_outer"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#posexplode_outer">posexplode_outer</a></h3>
<p>posexplode_outer(expr) - Separates the elements of array <code>expr</code> into multiple rows with positions, or the elements of map <code>expr</code> into multiple rows and columns with positions. Unless specified otherwise, uses the column name <code>pos</code> for position, <code>col</code> for elements of the array or <code>key</code> and <code>value</code> for elements of the map.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT posexplode_outer(array(10,20));</span>
 0  10
 1  20
</code></pre>

<p><br></p>
<h3 id="position"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#position">position</a></h3>
<p>position(substr, str[, pos]) - Returns the position of the first occurrence of <code>substr</code> in <code>str</code> after position <code>pos</code>.
The given <code>pos</code> and return value are 1-based.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT position(<span class="hljs-string">'bar'</span>, <span class="hljs-string">'foobarbar'</span>);</span>
 4
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT position(<span class="hljs-string">'bar'</span>, <span class="hljs-string">'foobarbar'</span>, 5);</span>
 7
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT POSITION(<span class="hljs-string">'bar'</span> IN <span class="hljs-string">'foobarbar'</span>);</span>
 4
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="positive"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#positive">positive</a></h3>
<p>positive(expr) - Returns the value of <code>expr</code>.</p>
<p><br></p>
<h3 id="pow"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#pow">pow</a></h3>
<p>pow(expr1, expr2) - Raises <code>expr1</code> to the power of <code>expr2</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT pow(2, 3);</span>
 8.0
</code></pre>

<p><br></p>
<h3 id="power"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#power">power</a></h3>
<p>power(expr1, expr2) - Raises <code>expr1</code> to the power of <code>expr2</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT power(2, 3);</span>
 8.0
</code></pre>

<p><br></p>
<h3 id="printf"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#printf">printf</a></h3>
<p>printf(strfmt, obj, ...) - Returns a formatted string from printf-style format strings.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs perl">&gt; SELECT <span class="hljs-keyword">printf</span>(<span class="hljs-string">"Hello World %d %s"</span>, <span class="hljs-number">100</span>, <span class="hljs-string">"days"</span>);
 Hello World <span class="hljs-number">100</span> days
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="quarter"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#quarter">quarter</a></h3>
<p>quarter(date) - Returns the quarter of the year for date, in the range 1 to 4.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT quarter(<span class="hljs-string">'2016-08-31'</span>);</span>
 3
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="radians"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#radians">radians</a></h3>
<p>radians(expr) - Converts degrees to radians.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>expr - angle in degrees</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT radians(180);</span>
 3.141592653589793
</code></pre>

<p><br></p>
<h3 id="rand"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#rand">rand</a></h3>
<p>rand([seed]) - Returns a random value with independent and identically distributed (i.i.d.) uniformly distributed values in [0, 1).</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT rand();</span>
 0.9629742951434543
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT rand(0);</span>
 0.8446490682263027
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT rand(null);</span>
 0.8446490682263027
</code></pre>

<p><strong>Note:</strong></p>
<p>The function is non-deterministic in general case.</p>
<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="randn"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#randn">randn</a></h3>
<p>randn([seed]) - Returns a random value with independent and identically distributed (i.i.d.) values drawn from the standard normal distribution.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT randn();</span>
 -0.3254147983080288
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT randn(0);</span>
 1.1164209726833079
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT randn(null);</span>
 1.1164209726833079
</code></pre>

<p><strong>Note:</strong></p>
<p>The function is non-deterministic in general case.</p>
<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="random"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#random">random</a></h3>
<p>random([seed]) - Returns a random value with independent and identically distributed (i.i.d.) uniformly distributed values in [0, 1).</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT random();</span>
 0.9629742951434543
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT random(0);</span>
 0.8446490682263027
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT random(null);</span>
 0.8446490682263027
</code></pre>

<p><strong>Note:</strong></p>
<p>The function is non-deterministic in general case.</p>
<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="rank"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#rank">rank</a></h3>
<p>rank() - Computes the rank of a value in a group of values. The result is one plus the number
of rows preceding or equal to the current row in the ordering of the partition. The values
will produce gaps in the sequence.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>children - this is to base the rank on; a change in the value of one the children will
    trigger a change in rank. This is an internal parameter and will be assigned by the
    Analyser.</li>
</ul>
<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="reflect"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#reflect">reflect</a></h3>
<p>reflect(class, method[, arg1[, arg2 ..]]) - Calls a method with reflection.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT reflect(<span class="hljs-string">'java.util.UUID'</span>, <span class="hljs-string">'randomUUID'</span>);</span>
 c33fb387-8500-4bfa-81d2-6e0e3e930df2
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT reflect(<span class="hljs-string">'java.util.UUID'</span>, <span class="hljs-string">'fromString'</span>, <span class="hljs-string">'a5cf6c42-0c85-418f-af6c-3e4e5b1328f2'</span>);</span>
 a5cf6c42-0c85-418f-af6c-3e4e5b1328f2
</code></pre>

<p><br></p>
<h3 id="regexp_extract"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#regexp_extract">regexp_extract</a></h3>
<p>regexp_extract(str, regexp[, idx]) - Extracts a group that matches <code>regexp</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT regexp_extract(<span class="hljs-string">'100-200'</span>, <span class="hljs-string">'(\\d+)-(\\d+)'</span>, 1);</span>
 100
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="regexp_replace"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#regexp_replace">regexp_replace</a></h3>
<p>regexp_replace(str, regexp, rep) - Replaces all substrings of <code>str</code> that match <code>regexp</code> with <code>rep</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT regexp_replace(<span class="hljs-string">'100-200'</span>, <span class="hljs-string">'(\\d+)'</span>, <span class="hljs-string">'num'</span>);</span>
 num-num
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="repeat"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#repeat">repeat</a></h3>
<p>repeat(str, n) - Returns the string which repeats the given string value n times.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT repeat(<span class="hljs-string">'123'</span>, 2);</span>
 123123
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="replace"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#replace">replace</a></h3>
<p>replace(str, search[, replace]) - Replaces all occurrences of <code>search</code> with <code>replace</code>.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>str - a string expression</li>
<li>search - a string expression. If <code>search</code> is not found in <code>str</code>, <code>str</code> is returned unchanged.</li>
<li>replace - a string expression. If <code>replace</code> is not specified or is an empty string, nothing replaces
    the string that is removed from <code>str</code>.</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT replace(<span class="hljs-string">'ABCabc'</span>, <span class="hljs-string">'abc'</span>, <span class="hljs-string">'DEF'</span>);</span>
 ABCDEF
</code></pre>

<p><strong>Since:</strong> 2.3.0</p>
<p><br></p>
<h3 id="reverse"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#reverse">reverse</a></h3>
<p>reverse(array) - Returns a reversed string or an array with reverse order of elements.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT reverse(<span class="hljs-string">'Spark SQL'</span>);</span>
 LQS krapS
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT reverse(array(2, 1, 4, 3));</span>
 [3,4,1,2]
</code></pre>

<p><strong>Note:</strong></p>
<p>Reverse logic for arrays is available since 2.4.0.</p>
<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="right"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#right">right</a></h3>
<p>right(str, len) - Returns the rightmost <code>len</code>(<code>len</code> can be string type) characters from the string <code>str</code>,if <code>len</code> is less or equal than 0 the result is an empty string.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT right(<span class="hljs-string">'Spark SQL'</span>, 3);</span>
 SQL
</code></pre>

<p><strong>Since:</strong> 2.3.0</p>
<p><br></p>
<h3 id="rint"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#rint">rint</a></h3>
<p>rint(expr) - Returns the double value that is closest in value to the argument and is equal to a mathematical integer.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs css">&gt; <span class="hljs-selector-tag">SELECT</span> <span class="hljs-selector-tag">rint</span>(12<span class="hljs-selector-class">.3456</span>);
 12<span class="hljs-selector-class">.0</span>
</code></pre>

<p><br></p>
<h3 id="rlike"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#rlike">rlike</a></h3>
<p>str rlike regexp - Returns true if <code>str</code> matches <code>regexp</code>, or false otherwise.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>str - a string expression</li>
<li>
<p>regexp - a string expression. The regex string should be a Java regular expression.</p>
<p>Since Spark 2.0, string literals (including regex patterns) are unescaped in our SQL
parser. For example, to match "\abc", a regular expression for <code>regexp</code> can be
"^\abc$".</p>
<p>There is a SQL config 'spark.sql.parser.escapedStringLiterals' that can be used to
fallback to the Spark 1.6 behavior regarding string literal parsing. For example,
if the config is enabled, the <code>regexp</code> that can match "\abc" is "^\abc$".</p>
</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SET spark.sql.parser.escapedStringLiterals=<span class="hljs-literal">true</span>;</span>
spark.sql.parser.escapedStringLiterals  true
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT <span class="hljs-string">'%SystemDrive%\Users\John'</span> rlike <span class="hljs-string">'%SystemDrive%\\Users.*'</span>;</span>
true
<span class="hljs-meta">&gt;</span><span class="bash"> SET spark.sql.parser.escapedStringLiterals=<span class="hljs-literal">false</span>;</span>
spark.sql.parser.escapedStringLiterals  false
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT <span class="hljs-string">'%SystemDrive%\\Users\\John'</span> rlike <span class="hljs-string">'%SystemDrive%\\\\Users.*'</span>;</span>
true
</code></pre>

<p><strong>Note:</strong></p>
<p>Use LIKE to match with simple string pattern.</p>
<p><strong>Since:</strong> 1.0.0</p>
<p><br></p>
<h3 id="rollup"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#rollup">rollup</a></h3>
<p>rollup([col1[, col2 ..]]) - create a multi-dimensional rollup using the specified columns
so that we can run aggregation on them.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs php">&gt; SELECT name, age, count(*) FROM VALUES (<span class="hljs-number">2</span>, <span class="hljs-string">'Alice'</span>), (<span class="hljs-number">5</span>, <span class="hljs-string">'Bob'</span>) people(age, name) GROUP BY rollup(name, age);
  Bob   <span class="hljs-number">5</span>   <span class="hljs-number">1</span>
  Alice <span class="hljs-number">2</span>   <span class="hljs-number">1</span>
  <span class="hljs-keyword">NULL</span>  <span class="hljs-keyword">NULL</span>    <span class="hljs-number">2</span>
  Bob   <span class="hljs-keyword">NULL</span>    <span class="hljs-number">1</span>
  Alice <span class="hljs-keyword">NULL</span>    <span class="hljs-number">1</span>
</code></pre>

<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="round"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#round">round</a></h3>
<p>round(expr, d) - Returns <code>expr</code> rounded to <code>d</code> decimal places using HALF_UP rounding mode.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT round(2.5, 0);</span>
 3
</code></pre>

<p><br></p>
<h3 id="row_number"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#row_number">row_number</a></h3>
<p>row_number() - Assigns a unique, sequential number to each row, starting with one,
according to the ordering of rows within the window partition.</p>
<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="rpad"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#rpad">rpad</a></h3>
<p>rpad(str, len[, pad]) - Returns <code>str</code>, right-padded with <code>pad</code> to a length of <code>len</code>.
If <code>str</code> is longer than <code>len</code>, the return value is shortened to <code>len</code> characters.
If <code>pad</code> is not specified, <code>str</code> will be padded to the right with space characters.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT rpad(<span class="hljs-string">'hi'</span>, 5, <span class="hljs-string">'??'</span>);</span>
 hi???
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT rpad(<span class="hljs-string">'hi'</span>, 1, <span class="hljs-string">'??'</span>);</span>
 h
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT rpad(<span class="hljs-string">'hi'</span>, 5);</span>
 hi
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="rtrim"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#rtrim">rtrim</a></h3>
<p>rtrim(str) - Removes the trailing space characters from <code>str</code>.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>str - a string expression</li>
<li>trimStr - the trim string characters to trim, the default value is a single space</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT rtrim(<span class="hljs-string">'    SparkSQL   '</span>);</span>
 SparkSQL
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="schema_of_csv"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#schema_of_csv">schema_of_csv</a></h3>
<p>schema_of_csv(csv[, options]) - Returns schema in the DDL format of CSV string.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">schema_of_csv</span>(<span class="hljs-params"><span class="hljs-string">'1,abc'</span></span>)</span>;
 <span class="hljs-keyword">struct</span>&lt;_c0:<span class="hljs-keyword">int</span>,_c1:<span class="hljs-keyword">string</span>&gt;
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="schema_of_json"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#schema_of_json">schema_of_json</a></h3>
<p>schema_of_json(json[, options]) - Returns schema in the DDL format of JSON string.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">schema_of_json</span>(<span class="hljs-params"><span class="hljs-string">'[{"col":0}]'</span></span>)</span>;
 array&lt;<span class="hljs-keyword">struct</span>&lt;col:bigint&gt;&gt;
&gt; <span class="hljs-function">SELECT <span class="hljs-title">schema_of_json</span>(<span class="hljs-params"><span class="hljs-string">'[{"col":01}]'</span>, map(<span class="hljs-string">'allowNumericLeadingZeros'</span>, <span class="hljs-string">'true'</span></span>))</span>;
 array&lt;<span class="hljs-keyword">struct</span>&lt;col:bigint&gt;&gt;
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="second"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#second">second</a></h3>
<p>second(timestamp) - Returns the second component of the string/timestamp.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT second(<span class="hljs-string">'2009-07-30 12:58:59'</span>);</span>
 59
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="sentences"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#sentences">sentences</a></h3>
<p>sentences(str[, lang, country]) - Splits <code>str</code> into an array of array of words.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">sentences</span>(<span class="hljs-params"><span class="hljs-string">'Hi there! Good morning.'</span></span>)</span>;
 [<span class="hljs-meta">[<span class="hljs-meta-string">"Hi"</span>,<span class="hljs-meta-string">"there"</span></span>],[<span class="hljs-string">"Good"</span>,<span class="hljs-string">"morning"</span>]]
</code></pre>

<p><strong>Since:</strong> 2.0.0</p>
<p><br></p>
<h3 id="sequence"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#sequence">sequence</a></h3>
<p>sequence(start, stop, step) - Generates an array of elements from start to stop (inclusive),
incrementing by step. The type of the returned elements is the same as the type of argument
expressions.</p>
<p>Supported types are: byte, short, integer, long, date, timestamp.</p>
<p>The start and stop expressions must resolve to the same type.
If start and stop expressions resolve to the 'date' or 'timestamp' type
then the step expression must resolve to the 'interval' type, otherwise to the same type
as the start and stop expressions.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>start - an expression. The start of the range.</li>
<li>stop - an expression. The end the range (inclusive).</li>
<li>step - an optional expression. The step of the range.
    By default step is 1 if start is less than or equal to stop, otherwise -1.
    For the temporal sequences it's 1 day and -1 day respectively.
    If start is greater than stop then the step must be negative, and vice versa.</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">sequence</span>(<span class="hljs-params"><span class="hljs-number">1</span>, <span class="hljs-number">5</span></span>)</span>;
 [<span class="hljs-meta">1,2,3,4,5</span>]
&gt; <span class="hljs-function">SELECT <span class="hljs-title">sequence</span>(<span class="hljs-params"><span class="hljs-number">5</span>, <span class="hljs-number">1</span></span>)</span>;
 [<span class="hljs-meta">5,4,3,2,1</span>]
&gt; <span class="hljs-function">SELECT <span class="hljs-title">sequence</span>(<span class="hljs-params">to_date(<span class="hljs-string">'2018-01-01'</span></span>), <span class="hljs-title">to_date</span>(<span class="hljs-params"><span class="hljs-string">'2018-03-01'</span></span>), interval 1 month)</span>;
 [<span class="hljs-meta">2018-01-01,2018-02-01,2018-03-01</span>]
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="sha"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#sha">sha</a></h3>
<p>sha(expr) - Returns a sha1 hash value as a hex string of the <code>expr</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT sha(<span class="hljs-string">'Spark'</span>);</span>
 85f5955f4b27a9a4c2aab6ffe5d7189fc298b92c
</code></pre>

<p><br></p>
<h3 id="sha1"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#sha1">sha1</a></h3>
<p>sha1(expr) - Returns a sha1 hash value as a hex string of the <code>expr</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT sha1(<span class="hljs-string">'Spark'</span>);</span>
 85f5955f4b27a9a4c2aab6ffe5d7189fc298b92c
</code></pre>

<p><br></p>
<h3 id="sha2"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#sha2">sha2</a></h3>
<p>sha2(expr, bitLength) - Returns a checksum of SHA-2 family as a hex string of <code>expr</code>.
SHA-224, SHA-256, SHA-384, and SHA-512 are supported. Bit length of 0 is equivalent to 256.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT sha2(<span class="hljs-string">'Spark'</span>, 256);</span>
 529bc3b07127ecb7e53a4dcf1991d9152c24537d919178022b2c42657f79a26b
</code></pre>

<p><br></p>
<h3 id="shiftleft"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#shiftleft">shiftleft</a></h3>
<p>shiftleft(base, expr) - Bitwise left shift.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT shiftleft(2, 1);</span>
 4
</code></pre>

<p><br></p>
<h3 id="shiftright"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#shiftright">shiftright</a></h3>
<p>shiftright(base, expr) - Bitwise (signed) right shift.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT shiftright(4, 1);</span>
 2
</code></pre>

<p><br></p>
<h3 id="shiftrightunsigned"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#shiftrightunsigned">shiftrightunsigned</a></h3>
<p>shiftrightunsigned(base, expr) - Bitwise unsigned right shift.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT shiftrightunsigned(4, 1);</span>
 2
</code></pre>

<p><br></p>
<h3 id="shuffle"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#shuffle">shuffle</a></h3>
<p>shuffle(array) - Returns a random permutation of the given array.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">shuffle</span>(<span class="hljs-params">array(<span class="hljs-number">1</span>, <span class="hljs-number">20</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span></span>))</span>;
 [<span class="hljs-meta">3,1,5,20</span>]
&gt; <span class="hljs-function">SELECT <span class="hljs-title">shuffle</span>(<span class="hljs-params">array(<span class="hljs-number">1</span>, <span class="hljs-number">20</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">3</span></span>))</span>;
 [<span class="hljs-meta">20,null,3,1</span>]
</code></pre>

<p><strong>Note:</strong></p>
<p>The function is non-deterministic.</p>
<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="sign"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#sign">sign</a></h3>
<p>sign(expr) - Returns -1.0, 0.0 or 1.0 as <code>expr</code> is negative, 0 or positive.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT sign(40);</span>
 1.0
</code></pre>

<p><br></p>
<h3 id="signum"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#signum">signum</a></h3>
<p>signum(expr) - Returns -1.0, 0.0 or 1.0 as <code>expr</code> is negative, 0 or positive.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT signum(40);</span>
 1.0
</code></pre>

<p><br></p>
<h3 id="sin"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#sin">sin</a></h3>
<p>sin(expr) - Returns the sine of <code>expr</code>, as if computed by <code>java.lang.Math.sin</code>.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>expr - angle in radians</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT sin(0);</span>
 0.0
</code></pre>

<p><br></p>
<h3 id="sinh"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#sinh">sinh</a></h3>
<p>sinh(expr) - Returns hyperbolic sine of <code>expr</code>, as if computed by <code>java.lang.Math.sinh</code>.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>expr - hyperbolic angle</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT sinh(0);</span>
 0.0
</code></pre>

<p><br></p>
<h3 id="size"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#size">size</a></h3>
<p>size(expr) - Returns the size of an array or a map.
The function returns null for null input if spark.sql.legacy.sizeOfNull is set to false or
spark.sql.ansi.enabled is set to true. Otherwise, the function returns -1 for null input.
With the default settings, the function returns -1 for null input.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT size(array(<span class="hljs-string">'b'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'a'</span>));</span>
 4
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT size(map(<span class="hljs-string">'a'</span>, 1, <span class="hljs-string">'b'</span>, 2));</span>
 2
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT size(NULL);</span>
 -1
</code></pre>

<p><br></p>
<h3 id="skewness"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#skewness">skewness</a></h3>
<p>skewness(expr) - Returns the skewness value calculated from values of a group.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT skewness(col) FROM VALUES (-10), (-20), (100), (1000) AS tab(col);</span>
 1.1135657469022011
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT skewness(col) FROM VALUES (-1000), (-100), (10), (20) AS tab(col);</span>
 -1.1135657469022011
</code></pre>

<p><strong>Since:</strong> 1.6.0</p>
<p><br></p>
<h3 id="slice"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#slice">slice</a></h3>
<p>slice(x, start, length) - Subsets array x starting from index start (array indices start at 1, or starting from the end if start is negative) with the specified length.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">slice</span>(<span class="hljs-params">array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span></span>), 2, 2)</span>;
 [<span class="hljs-meta">2,3</span>]
&gt; <span class="hljs-function">SELECT <span class="hljs-title">slice</span>(<span class="hljs-params">array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span></span>), -2, 2)</span>;
 [<span class="hljs-meta">3,4</span>]
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="smallint"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#smallint">smallint</a></h3>
<p>smallint(expr) - Casts the value <code>expr</code> to the target data type <code>smallint</code>.</p>
<p><br></p>
<h3 id="some"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#some">some</a></h3>
<p>some(expr) - Returns true if at least one value of <code>expr</code> is true.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs php">&gt; SELECT some(col) FROM VALUES (<span class="hljs-keyword">true</span>), (<span class="hljs-keyword">false</span>), (<span class="hljs-keyword">false</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-keyword">true</span>
&gt; SELECT some(col) FROM VALUES (<span class="hljs-keyword">NULL</span>), (<span class="hljs-keyword">true</span>), (<span class="hljs-keyword">false</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-keyword">true</span>
&gt; SELECT some(col) FROM VALUES (<span class="hljs-keyword">false</span>), (<span class="hljs-keyword">false</span>), (<span class="hljs-keyword">NULL</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-keyword">false</span>
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="sort_array"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#sort_array">sort_array</a></h3>
<p>sort_array(array[, ascendingOrder]) - Sorts the input array in ascending or descending order
according to the natural ordering of the array elements. Null elements will be placed
at the beginning of the returned array in ascending order or at the end of the returned
array in descending order.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">sort_array</span>(<span class="hljs-params">array(<span class="hljs-string">'b'</span>, <span class="hljs-string">'d'</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">'c'</span>, <span class="hljs-string">'a'</span></span>), <span class="hljs-literal">true</span>)</span>;
 [<span class="hljs-meta">null,<span class="hljs-meta-string">"a"</span>,<span class="hljs-meta-string">"b"</span>,<span class="hljs-meta-string">"c"</span>,<span class="hljs-meta-string">"d"</span></span>]
</code></pre>

<p><br></p>
<h3 id="soundex"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#soundex">soundex</a></h3>
<p>soundex(str) - Returns Soundex code of the string.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT soundex(<span class="hljs-string">'Miller'</span>);</span>
 M460
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="space"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#space">space</a></h3>
<p>space(n) - Returns a string consisting of <code>n</code> spaces.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT concat(space(2), <span class="hljs-string">'1'</span>);</span>
   1
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="spark_partition_id"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#spark_partition_id">spark_partition_id</a></h3>
<p>spark_partition_id() - Returns the current partition id.</p>
<p><br></p>
<h3 id="split"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#split">split</a></h3>
<p>split(str, regex, limit) - Splits <code>str</code> around occurrences that match <code>regex</code> and returns an array with a length of at most <code>limit</code></p>
<p><strong>Arguments:</strong></p>
<ul>
<li>str - a string expression to split.</li>
<li>regex - a string representing a regular expression. The regex string should be a
  Java regular expression.</li>
<li>limit - an integer expression which controls the number of times the regex is applied.<ul>
<li>limit &gt; 0: The resulting array's length will not be more than <code>limit</code>,
  and the resulting array's last entry will contain all input
  beyond the last matched regex.</li>
<li>limit &lt;= 0: <code>regex</code> will be applied as many times as possible, and
  the resulting array can be of any size.</li>
</ul>
</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">split</span>(<span class="hljs-params"><span class="hljs-string">'oneAtwoBthreeC'</span>, <span class="hljs-string">'[ABC]'</span></span>)</span>;
 [<span class="hljs-meta"><span class="hljs-meta-string">"one"</span>,<span class="hljs-meta-string">"two"</span>,<span class="hljs-meta-string">"three"</span>,<span class="hljs-meta-string">""</span></span>]
&gt; <span class="hljs-function">SELECT <span class="hljs-title">split</span>(<span class="hljs-params"><span class="hljs-string">'oneAtwoBthreeC'</span>, <span class="hljs-string">'[ABC]'</span>, <span class="hljs-number">-1</span></span>)</span>;
 [<span class="hljs-meta"><span class="hljs-meta-string">"one"</span>,<span class="hljs-meta-string">"two"</span>,<span class="hljs-meta-string">"three"</span>,<span class="hljs-meta-string">""</span></span>]
&gt; <span class="hljs-function">SELECT <span class="hljs-title">split</span>(<span class="hljs-params"><span class="hljs-string">'oneAtwoBthreeC'</span>, <span class="hljs-string">'[ABC]'</span>, <span class="hljs-number">2</span></span>)</span>;
 [<span class="hljs-meta"><span class="hljs-meta-string">"one"</span>,<span class="hljs-meta-string">"twoBthreeC"</span></span>]
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="sqrt"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#sqrt">sqrt</a></h3>
<p>sqrt(expr) - Returns the square root of <code>expr</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT sqrt(4);</span>
 2.0
</code></pre>

<p><br></p>
<h3 id="stack"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#stack">stack</a></h3>
<p>stack(n, expr1, ..., exprk) - Separates <code>expr1</code>, ..., <code>exprk</code> into <code>n</code> rows. Uses column names col0, col1, etc. by default unless specified otherwise.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cpp">&gt; <span class="hljs-function">SELECT <span class="hljs-title">stack</span><span class="hljs-params">(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)</span></span>;
 <span class="hljs-number">1</span>  <span class="hljs-number">2</span>
 <span class="hljs-number">3</span>  <span class="hljs-literal">NULL</span>
</code></pre>

<p><br></p>
<h3 id="std"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#std">std</a></h3>
<p>std(expr) - Returns the sample standard deviation calculated from values of a group.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT std(col) FROM VALUES (1), (2), (3) AS tab(col);</span>
 1.0
</code></pre>

<p><strong>Since:</strong> 1.6.0</p>
<p><br></p>
<h3 id="stddev"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#stddev">stddev</a></h3>
<p>stddev(expr) - Returns the sample standard deviation calculated from values of a group.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT stddev(col) FROM VALUES (1), (2), (3) AS tab(col);</span>
 1.0
</code></pre>

<p><strong>Since:</strong> 1.6.0</p>
<p><br></p>
<h3 id="stddev_pop"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#stddev_pop">stddev_pop</a></h3>
<p>stddev_pop(expr) - Returns the population standard deviation calculated from values of a group.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT stddev_pop(col) FROM VALUES (1), (2), (3) AS tab(col);</span>
 0.816496580927726
</code></pre>

<p><strong>Since:</strong> 1.6.0</p>
<p><br></p>
<h3 id="stddev_samp"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#stddev_samp">stddev_samp</a></h3>
<p>stddev_samp(expr) - Returns the sample standard deviation calculated from values of a group.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT stddev_samp(col) FROM VALUES (1), (2), (3) AS tab(col);</span>
 1.0
</code></pre>

<p><strong>Since:</strong> 1.6.0</p>
<p><br></p>
<h3 id="str_to_map"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#str_to_map">str_to_map</a></h3>
<p>str_to_map(text[, pairDelim[, keyValueDelim]]) - Creates a map after splitting the text into key/value pairs using delimiters. Default delimiters are ',' for <code>pairDelim</code> and ':' for <code>keyValueDelim</code>. Both <code>pairDelim</code> and <code>keyValueDelim</code> are treated as regular expressions.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">str_to_map</span>(<span class="hljs-params"><span class="hljs-string">'a:1,b:2,c:3'</span>, <span class="hljs-string">','</span>, <span class="hljs-string">':'</span></span>)</span>;
 {<span class="hljs-string">"a"</span>:<span class="hljs-string">"1"</span>,<span class="hljs-string">"b"</span>:<span class="hljs-string">"2"</span>,<span class="hljs-string">"c"</span>:<span class="hljs-string">"3"</span>}
&gt; <span class="hljs-function">SELECT <span class="hljs-title">str_to_map</span>(<span class="hljs-params"><span class="hljs-string">'a'</span></span>)</span>;
 {<span class="hljs-string">"a"</span>:<span class="hljs-literal">null</span>}
</code></pre>

<p><strong>Since:</strong> 2.0.1</p>
<p><br></p>
<h3 id="string"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#string">string</a></h3>
<p>string(expr) - Casts the value <code>expr</code> to the target data type <code>string</code>.</p>
<p><br></p>
<h3 id="struct"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#struct">struct</a></h3>
<p>struct(col1, col2, col3, ...) - Creates a struct with the given field values.</p>
<p><br></p>
<h3 id="substr"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#substr">substr</a></h3>
<p>substr(str, pos[, len]) - Returns the substring of <code>str</code> that starts at <code>pos</code> and is of length <code>len</code>, or the slice of byte array that starts at <code>pos</code> and is of length <code>len</code>.</p>
<p>substr(str FROM pos[ FOR len]]) - Returns the substring of <code>str</code> that starts at <code>pos</code> and is of length <code>len</code>, or the slice of byte array that starts at <code>pos</code> and is of length <code>len</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT substr(<span class="hljs-string">'Spark SQL'</span>, 5);</span>
 k SQL
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT substr(<span class="hljs-string">'Spark SQL'</span>, -3);</span>
 SQL
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT substr(<span class="hljs-string">'Spark SQL'</span>, 5, 1);</span>
 k
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT substr(<span class="hljs-string">'Spark SQL'</span> FROM 5);</span>
 k SQL
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT substr(<span class="hljs-string">'Spark SQL'</span> FROM -3);</span>
 SQL
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT substr(<span class="hljs-string">'Spark SQL'</span> FROM 5 FOR 1);</span>
 k
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="substring"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#substring">substring</a></h3>
<p>substring(str, pos[, len]) - Returns the substring of <code>str</code> that starts at <code>pos</code> and is of length <code>len</code>, or the slice of byte array that starts at <code>pos</code> and is of length <code>len</code>.</p>
<p>substring(str FROM pos[ FOR len]]) - Returns the substring of <code>str</code> that starts at <code>pos</code> and is of length <code>len</code>, or the slice of byte array that starts at <code>pos</code> and is of length <code>len</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT substring(<span class="hljs-string">'Spark SQL'</span>, 5);</span>
 k SQL
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT substring(<span class="hljs-string">'Spark SQL'</span>, -3);</span>
 SQL
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT substring(<span class="hljs-string">'Spark SQL'</span>, 5, 1);</span>
 k
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT substring(<span class="hljs-string">'Spark SQL'</span> FROM 5);</span>
 k SQL
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT substring(<span class="hljs-string">'Spark SQL'</span> FROM -3);</span>
 SQL
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT substring(<span class="hljs-string">'Spark SQL'</span> FROM 5 FOR 1);</span>
 k
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="substring_index"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#substring_index">substring_index</a></h3>
<p>substring_index(str, delim, count) - Returns the substring from <code>str</code> before <code>count</code> occurrences of the delimiter <code>delim</code>.
If <code>count</code> is positive, everything to the left of the final delimiter (counting from the
left) is returned. If <code>count</code> is negative, everything to the right of the final delimiter
(counting from the right) is returned. The function substring_index performs a case-sensitive match
when searching for <code>delim</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT substring_index(<span class="hljs-string">'www.apache.org'</span>, <span class="hljs-string">'.'</span>, 2);</span>
 www.apache
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="sum"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#sum">sum</a></h3>
<p>sum(expr) - Returns the sum calculated from values of a group.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs php">&gt; SELECT sum(col) FROM VALUES (<span class="hljs-number">5</span>), (<span class="hljs-number">10</span>), (<span class="hljs-number">15</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-number">30</span>
&gt; SELECT sum(col) FROM VALUES (<span class="hljs-keyword">NULL</span>), (<span class="hljs-number">10</span>), (<span class="hljs-number">15</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-number">25</span>
&gt; SELECT sum(col) FROM VALUES (<span class="hljs-keyword">NULL</span>), (<span class="hljs-keyword">NULL</span>) <span class="hljs-keyword">AS</span> tab(col);
 <span class="hljs-keyword">NULL</span>
</code></pre>

<p><strong>Since:</strong> 1.0.0</p>
<p><br></p>
<h3 id="tan"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#tan">tan</a></h3>
<p>tan(expr) - Returns the tangent of <code>expr</code>, as if computed by <code>java.lang.Math.tan</code>.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>expr - angle in radians</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT tan(0);</span>
 0.0
</code></pre>

<p><br></p>
<h3 id="tanh"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#tanh">tanh</a></h3>
<p>tanh(expr) - Returns the hyperbolic tangent of <code>expr</code>, as if computed by
<code>java.lang.Math.tanh</code>.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>expr - hyperbolic angle</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT tanh(0);</span>
 0.0
</code></pre>

<p><br></p>
<h3 id="timestamp"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#timestamp">timestamp</a></h3>
<p>timestamp(expr) - Casts the value <code>expr</code> to the target data type <code>timestamp</code>.</p>
<p><br></p>
<h3 id="tinyint"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#tinyint">tinyint</a></h3>
<p>tinyint(expr) - Casts the value <code>expr</code> to the target data type <code>tinyint</code>.</p>
<p><br></p>
<h3 id="to_csv"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#to_csv">to_csv</a></h3>
<p>to_csv(expr[, options]) - Returns a CSV string with a given struct value</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT to_csv(named_struct(<span class="hljs-string">'a'</span>, 1, <span class="hljs-string">'b'</span>, 2));</span>
 1,2
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT to_csv(named_struct(<span class="hljs-string">'time'</span>, to_timestamp(<span class="hljs-string">'2015-08-26'</span>, <span class="hljs-string">'yyyy-MM-dd'</span>)), map(<span class="hljs-string">'timestampFormat'</span>, <span class="hljs-string">'dd/MM/yyyy'</span>));</span>
 26/08/2015
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="to_date"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#to_date">to_date</a></h3>
<p>to_date(date_str[, fmt]) - Parses the <code>date_str</code> expression with the <code>fmt</code> expression to
a date. Returns null with invalid input. By default, it follows casting rules to a date if
the <code>fmt</code> is omitted.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>date_str - A string to be parsed to date.</li>
<li>fmt - Date format pattern to follow. See <a href="https://spark.apache.org/docs/latest/sql-ref-datetime-pattern.html">Datetime Patterns</a> for valid
        date and time format patterns.</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT to_date(<span class="hljs-string">'2009-07-30 04:17:52'</span>);</span>
 2009-07-30
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT to_date(<span class="hljs-string">'2016-12-31'</span>, <span class="hljs-string">'yyyy-MM-dd'</span>);</span>
 2016-12-31
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="to_json"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#to_json">to_json</a></h3>
<p>to_json(expr[, options]) - Returns a JSON string with a given struct value</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">to_json</span>(<span class="hljs-params">named_struct(<span class="hljs-string">'a'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'b'</span>, <span class="hljs-number">2</span></span>))</span>;
 {<span class="hljs-string">"a"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"b"</span>:<span class="hljs-number">2</span>}
&gt; <span class="hljs-function">SELECT <span class="hljs-title">to_json</span>(<span class="hljs-params">named_struct(<span class="hljs-string">'time'</span>, to_timestamp(<span class="hljs-string">'2015-08-26'</span>, <span class="hljs-string">'yyyy-MM-dd'</span></span>)), <span class="hljs-title">map</span>(<span class="hljs-params"><span class="hljs-string">'timestampFormat'</span>, <span class="hljs-string">'dd/MM/yyyy'</span></span>))</span>;
 {<span class="hljs-string">"time"</span>:<span class="hljs-string">"26/08/2015"</span>}
&gt; <span class="hljs-function">SELECT <span class="hljs-title">to_json</span>(<span class="hljs-params">array(named_struct(<span class="hljs-string">'a'</span>, <span class="hljs-number">1</span>, <span class="hljs-string">'b'</span>, <span class="hljs-number">2</span></span>)))</span>;
 [<span class="hljs-meta">{<span class="hljs-meta-string">"a"</span>:1,<span class="hljs-meta-string">"b"</span>:2}</span>]
&gt; <span class="hljs-function">SELECT <span class="hljs-title">to_json</span>(<span class="hljs-params">map(<span class="hljs-string">'a'</span>, named_struct(<span class="hljs-string">'b'</span>, <span class="hljs-number">1</span></span>)))</span>;
 {<span class="hljs-string">"a"</span>:{<span class="hljs-string">"b"</span>:<span class="hljs-number">1</span>}}
&gt; <span class="hljs-function">SELECT <span class="hljs-title">to_json</span>(<span class="hljs-params">map(named_struct(<span class="hljs-string">'a'</span>, <span class="hljs-number">1</span></span>),<span class="hljs-title">named_struct</span>(<span class="hljs-params"><span class="hljs-string">'b'</span>, <span class="hljs-number">2</span></span>)))</span>;
 {<span class="hljs-string">"[1]"</span>:{<span class="hljs-string">"b"</span>:<span class="hljs-number">2</span>}}
&gt; <span class="hljs-function">SELECT <span class="hljs-title">to_json</span>(<span class="hljs-params">map(<span class="hljs-string">'a'</span>, <span class="hljs-number">1</span></span>))</span>;
 {<span class="hljs-string">"a"</span>:<span class="hljs-number">1</span>}
&gt; <span class="hljs-function">SELECT <span class="hljs-title">to_json</span>(<span class="hljs-params">array((map(<span class="hljs-string">'a'</span>, <span class="hljs-number">1</span></span>))))</span>;
 [<span class="hljs-meta">{<span class="hljs-meta-string">"a"</span>:1}</span>]
</code></pre>

<p><strong>Since:</strong> 2.2.0</p>
<p><br></p>
<h3 id="to_timestamp"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#to_timestamp">to_timestamp</a></h3>
<p>to_timestamp(timestamp_str[, fmt]) - Parses the <code>timestamp_str</code> expression with the <code>fmt</code> expression
to a timestamp. Returns null with invalid input. By default, it follows casting rules to
a timestamp if the <code>fmt</code> is omitted.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>timestamp_str - A string to be parsed to timestamp.</li>
<li>fmt - Timestamp format pattern to follow. See <a href="https://spark.apache.org/docs/latest/sql-ref-datetime-pattern.html">Datetime Patterns</a> for valid
        date and time format patterns.</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT to_timestamp(<span class="hljs-string">'2016-12-31 00:12:00'</span>);</span>
 2016-12-31 00:12:00
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT to_timestamp(<span class="hljs-string">'2016-12-31'</span>, <span class="hljs-string">'yyyy-MM-dd'</span>);</span>
 2016-12-31 00:00:00
</code></pre>

<p><strong>Since:</strong> 2.2.0</p>
<p><br></p>
<h3 id="to_unix_timestamp"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#to_unix_timestamp">to_unix_timestamp</a></h3>
<p>to_unix_timestamp(timeExp[, format]) - Returns the UNIX timestamp of the given time.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>timeExp - A date/timestamp or string which is returned as a UNIX timestamp.</li>
<li>format - Date/time format pattern to follow. Ignored if <code>timeExp</code> is not a string.
           Default value is "yyyy-MM-dd HH:mm:ss". See <a href="https://spark.apache.org/docs/latest/sql-ref-datetime-pattern.html">Datetime Patterns</a>
           for valid date and time format patterns.</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT to_unix_timestamp(<span class="hljs-string">'2016-04-08'</span>, <span class="hljs-string">'yyyy-MM-dd'</span>);</span>
 1460098800
</code></pre>

<p><strong>Since:</strong> 1.6.0</p>
<p><br></p>
<h3 id="to_utc_timestamp"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#to_utc_timestamp">to_utc_timestamp</a></h3>
<p>to_utc_timestamp(timestamp, timezone) - Given a timestamp like '2017-07-14 02:40:00.0', interprets it as a time in the given time zone, and renders that time as a timestamp in UTC. For example, 'GMT+1' would yield '2017-07-14 01:40:00.0'.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT to_utc_timestamp(<span class="hljs-string">'2016-08-31'</span>, <span class="hljs-string">'Asia/Seoul'</span>);</span>
 2016-08-30 15:00:00
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="transform"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#transform">transform</a></h3>
<p>transform(expr, func) - Transforms elements in an array using the function.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">transform</span>(<span class="hljs-params">array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span></span>), x -&gt; x + 1)</span>;
 [<span class="hljs-meta">2,3,4</span>]
&gt; <span class="hljs-function">SELECT <span class="hljs-title">transform</span>(<span class="hljs-params">array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span></span>), (<span class="hljs-params">x, i</span>) -&gt; x + i)</span>;
 [<span class="hljs-meta">1,3,5</span>]
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="transform_keys"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#transform_keys">transform_keys</a></h3>
<p>transform_keys(expr, func) - Transforms elements in a map using the function.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs coffeescript">&gt; SELECT transform_keys(map_from_arrays(array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)), <span class="hljs-function"><span class="hljs-params">(k, v)</span> -&gt;</span> k + <span class="hljs-number">1</span>);
 {<span class="hljs-number">2</span>:<span class="hljs-number">1</span>,<span class="hljs-number">3</span>:<span class="hljs-number">2</span>,<span class="hljs-number">4</span>:<span class="hljs-number">3</span>}
&gt; SELECT transform_keys(map_from_arrays(array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)), <span class="hljs-function"><span class="hljs-params">(k, v)</span> -&gt;</span> k + v);
 {<span class="hljs-number">2</span>:<span class="hljs-number">1</span>,<span class="hljs-number">4</span>:<span class="hljs-number">2</span>,<span class="hljs-number">6</span>:<span class="hljs-number">3</span>}
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="transform_values"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#transform_values">transform_values</a></h3>
<p>transform_values(expr, func) - Transforms values in the map using the function.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs coffeescript">&gt; SELECT transform_values(map_from_arrays(array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)), <span class="hljs-function"><span class="hljs-params">(k, v)</span> -&gt;</span> v + <span class="hljs-number">1</span>);
 {<span class="hljs-number">1</span>:<span class="hljs-number">2</span>,<span class="hljs-number">2</span>:<span class="hljs-number">3</span>,<span class="hljs-number">3</span>:<span class="hljs-number">4</span>}
&gt; SELECT transform_values(map_from_arrays(array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)), <span class="hljs-function"><span class="hljs-params">(k, v)</span> -&gt;</span> k + v);
 {<span class="hljs-number">1</span>:<span class="hljs-number">2</span>,<span class="hljs-number">2</span>:<span class="hljs-number">4</span>,<span class="hljs-number">3</span>:<span class="hljs-number">6</span>}
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="translate"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#translate">translate</a></h3>
<p>translate(input, from, to) - Translates the <code>input</code> string by replacing the characters present in the <code>from</code> string with the corresponding characters in the <code>to</code> string.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT translate(<span class="hljs-string">'AaBbCc'</span>, <span class="hljs-string">'abc'</span>, <span class="hljs-string">'123'</span>);</span>
 A1B2C3
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="trim"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#trim">trim</a></h3>
<p>trim(str) - Removes the leading and trailing space characters from <code>str</code>.</p>
<p>trim(BOTH FROM str) - Removes the leading and trailing space characters from <code>str</code>.</p>
<p>trim(LEADING FROM str) - Removes the leading space characters from <code>str</code>.</p>
<p>trim(TRAILING FROM str) - Removes the trailing space characters from <code>str</code>.</p>
<p>trim(trimStr FROM str) - Remove the leading and trailing <code>trimStr</code> characters from <code>str</code>.</p>
<p>trim(BOTH trimStr FROM str) - Remove the leading and trailing <code>trimStr</code> characters from <code>str</code>.</p>
<p>trim(LEADING trimStr FROM str) - Remove the leading <code>trimStr</code> characters from <code>str</code>.</p>
<p>trim(TRAILING trimStr FROM str) - Remove the trailing <code>trimStr</code> characters from <code>str</code>.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>str - a string expression</li>
<li>trimStr - the trim string characters to trim, the default value is a single space</li>
<li>BOTH, FROM - these are keywords to specify trimming string characters from both ends of
    the string</li>
<li>LEADING, FROM - these are keywords to specify trimming string characters from the left
    end of the string</li>
<li>TRAILING, FROM - these are keywords to specify trimming string characters from the right
    end of the string</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT trim(<span class="hljs-string">'    SparkSQL   '</span>);</span>
 SparkSQL
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT trim(BOTH FROM <span class="hljs-string">'    SparkSQL   '</span>);</span>
 SparkSQL
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT trim(LEADING FROM <span class="hljs-string">'    SparkSQL   '</span>);</span>
 SparkSQL
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT trim(TRAILING FROM <span class="hljs-string">'    SparkSQL   '</span>);</span>
     SparkSQL
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT trim(<span class="hljs-string">'SL'</span> FROM <span class="hljs-string">'SSparkSQLS'</span>);</span>
 parkSQ
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT trim(BOTH <span class="hljs-string">'SL'</span> FROM <span class="hljs-string">'SSparkSQLS'</span>);</span>
 parkSQ
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT trim(LEADING <span class="hljs-string">'SL'</span> FROM <span class="hljs-string">'SSparkSQLS'</span>);</span>
 parkSQLS
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT trim(TRAILING <span class="hljs-string">'SL'</span> FROM <span class="hljs-string">'SSparkSQLS'</span>);</span>
 SSparkSQ
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="trunc"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#trunc">trunc</a></h3>
<p>trunc(date, fmt) - Returns <code>date</code> with the time portion of the day truncated to the unit specified by the format model <code>fmt</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT trunc(<span class="hljs-string">'2019-08-04'</span>, <span class="hljs-string">'week'</span>);</span>
 2019-07-29
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT trunc(<span class="hljs-string">'2019-08-04'</span>, <span class="hljs-string">'quarter'</span>);</span>
 2019-07-01
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT trunc(<span class="hljs-string">'2009-02-12'</span>, <span class="hljs-string">'MM'</span>);</span>
 2009-02-01
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT trunc(<span class="hljs-string">'2015-10-27'</span>, <span class="hljs-string">'YEAR'</span>);</span>
 2015-01-01
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="typeof"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#typeof">typeof</a></h3>
<p>typeof(expr) - Return DDL-formatted type string for the data type of the input.</p>
<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="ucase"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#ucase">ucase</a></h3>
<p>ucase(str) - Returns <code>str</code> with all characters changed to uppercase.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT ucase(<span class="hljs-string">'SparkSql'</span>);</span>
 SPARKSQL
</code></pre>

<p><strong>Since:</strong> 1.0.1</p>
<p><br></p>
<h3 id="unbase64"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#unbase64">unbase64</a></h3>
<p>unbase64(str) - Converts the argument from a base 64 string <code>str</code> to a binary.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT unbase64(<span class="hljs-string">'U3BhcmsgU1FM'</span>);</span>
 Spark SQL
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="unhex"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#unhex">unhex</a></h3>
<p>unhex(expr) - Converts hexadecimal <code>expr</code> to binary.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT decode(unhex(<span class="hljs-string">'537061726B2053514C'</span>), <span class="hljs-string">'UTF-8'</span>);</span>
 Spark SQL
</code></pre>

<p><br></p>
<h3 id="unix_timestamp"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#unix_timestamp">unix_timestamp</a></h3>
<p>unix_timestamp([timeExp[, format]]) - Returns the UNIX timestamp of current or specified time.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>timeExp - A date/timestamp or string. If not provided, this defaults to current time.</li>
<li>format - Date/time format pattern to follow. Ignored if <code>timeExp</code> is not a string.
           Default value is "yyyy-MM-dd HH:mm:ss". See <a href="https://spark.apache.org/docs/latest/sql-ref-datetime-pattern.html"> Datetime Patterns</a>
           for valid date and time format patterns.</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT unix_timestamp();</span>
 1476884637
<span class="hljs-meta">&gt;</span><span class="bash"> SELECT unix_timestamp(<span class="hljs-string">'2016-04-08'</span>, <span class="hljs-string">'yyyy-MM-dd'</span>);</span>
 1460041200
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="upper"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#upper">upper</a></h3>
<p>upper(str) - Returns <code>str</code> with all characters changed to uppercase.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT upper(<span class="hljs-string">'SparkSql'</span>);</span>
 SPARKSQL
</code></pre>

<p><strong>Since:</strong> 1.0.1</p>
<p><br></p>
<h3 id="uuid"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#uuid">uuid</a></h3>
<p>uuid() - Returns an universally unique identifier (UUID) string. The value is returned as a canonical UUID 36-character string.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT uuid();</span>
 46707d92-02f4-4817-8116-a4c3b23e6266
</code></pre>

<p><strong>Note:</strong></p>
<p>The function is non-deterministic.</p>
<p><br></p>
<h3 id="var_pop"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#var_pop">var_pop</a></h3>
<p>var_pop(expr) - Returns the population variance calculated from values of a group.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT var_pop(col) FROM VALUES (1), (2), (3) AS tab(col);</span>
 0.6666666666666666
</code></pre>

<p><strong>Since:</strong> 1.6.0</p>
<p><br></p>
<h3 id="var_samp"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#var_samp">var_samp</a></h3>
<p>var_samp(expr) - Returns the sample variance calculated from values of a group.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT var_samp(col) FROM VALUES (1), (2), (3) AS tab(col);</span>
 1.0
</code></pre>

<p><strong>Since:</strong> 1.6.0</p>
<p><br></p>
<h3 id="variance"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#variance">variance</a></h3>
<p>variance(expr) - Returns the sample variance calculated from values of a group.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT variance(col) FROM VALUES (1), (2), (3) AS tab(col);</span>
 1.0
</code></pre>

<p><strong>Since:</strong> 1.6.0</p>
<p><br></p>
<h3 id="version"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#version">version</a></h3>
<p>version() - Returns the Spark version. The string contains 2 fields, the first being a release version and the second being a git revision.</p>
<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="weekday"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#weekday">weekday</a></h3>
<p>weekday(date) - Returns the day of the week for date/timestamp (0 = Monday, 1 = Tuesday, ..., 6 = Sunday).</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT weekday(<span class="hljs-string">'2009-07-30'</span>);</span>
 3
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="weekofyear"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#weekofyear">weekofyear</a></h3>
<p>weekofyear(date) - Returns the week of the year of the given date. A week is considered to start on a Monday and week 1 is the first week with &gt;3 days.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT weekofyear(<span class="hljs-string">'2008-02-20'</span>);</span>
 8
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="when"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#when">when</a></h3>
<p>CASE WHEN expr1 THEN expr2 [WHEN expr3 THEN expr4]* [ELSE expr5] END - When <code>expr1</code> = true, returns <code>expr2</code>; else when <code>expr3</code> = true, returns <code>expr4</code>; else returns <code>expr5</code>.</p>
<p><strong>Arguments:</strong></p>
<ul>
<li>expr1, expr3 - the branch condition expressions should all be boolean type.</li>
<li>expr2, expr4, expr5 - the branch value expressions and else value expression should all be
    same type or coercible to a common type.</li>
</ul>
<p><strong>Examples:</strong></p>
<pre><code class="hljs css">&gt; <span class="hljs-selector-tag">SELECT</span> <span class="hljs-selector-tag">CASE</span> <span class="hljs-selector-tag">WHEN</span> 1 &gt; 0 <span class="hljs-selector-tag">THEN</span> 1 <span class="hljs-selector-tag">WHEN</span> 2 &gt; 0 <span class="hljs-selector-tag">THEN</span> 2<span class="hljs-selector-class">.0</span> <span class="hljs-selector-tag">ELSE</span> 1<span class="hljs-selector-class">.2</span> <span class="hljs-selector-tag">END</span>;
 1<span class="hljs-selector-class">.0</span>
&gt; <span class="hljs-selector-tag">SELECT</span> <span class="hljs-selector-tag">CASE</span> <span class="hljs-selector-tag">WHEN</span> 1 &lt; 0 <span class="hljs-selector-tag">THEN</span> 1 <span class="hljs-selector-tag">WHEN</span> 2 &gt; 0 <span class="hljs-selector-tag">THEN</span> 2<span class="hljs-selector-class">.0</span> <span class="hljs-selector-tag">ELSE</span> 1<span class="hljs-selector-class">.2</span> <span class="hljs-selector-tag">END</span>;
 2<span class="hljs-selector-class">.0</span>
&gt; <span class="hljs-selector-tag">SELECT</span> <span class="hljs-selector-tag">CASE</span> <span class="hljs-selector-tag">WHEN</span> 1 &lt; 0 <span class="hljs-selector-tag">THEN</span> 1 <span class="hljs-selector-tag">WHEN</span> 2 &lt; 0 <span class="hljs-selector-tag">THEN</span> 2<span class="hljs-selector-class">.0</span> <span class="hljs-selector-tag">END</span>;
 <span class="hljs-selector-tag">NULL</span>
</code></pre>

<p><br></p>
<h3 id="window"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#window">window</a></h3>
<p>N/A.</p>
<p><br></p>
<h3 id="xpath"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#xpath">xpath</a></h3>
<p>xpath(xml, xpath) - Returns a string array of values within the nodes of xml that match the XPath expression.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs xml">&gt; SELECT xpath('<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>b1<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>b2<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>b3<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">c</span>&gt;</span>c1<span class="hljs-tag">&lt;/<span class="hljs-name">c</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">c</span>&gt;</span>c2<span class="hljs-tag">&lt;/<span class="hljs-name">c</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>','a/b/text()');
 ["b1","b2","b3"]
</code></pre>

<p><br></p>
<h3 id="xpath_boolean"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#xpath_boolean">xpath_boolean</a></h3>
<p>xpath_boolean(xml, xpath) - Returns true if the XPath expression evaluates to true, or if a matching node is found.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs cs">&gt; <span class="hljs-function">SELECT <span class="hljs-title">xpath_boolean</span>(<span class="hljs-params"><span class="hljs-string">'&lt;a&gt;&lt;b&gt;1&lt;/b&gt;&lt;/a&gt;'</span>,<span class="hljs-string">'a/b'</span></span>)</span>;
 <span class="hljs-literal">true</span>
</code></pre>

<p><br></p>
<h3 id="xpath_double"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#xpath_double">xpath_double</a></h3>
<p>xpath_double(xml, xpath) - Returns a double value, the value zero if no match is found, or NaN if a match is found but the value is non-numeric.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs xml">&gt; SELECT xpath_double('<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>', 'sum(a/b)');
 3.0
</code></pre>

<p><br></p>
<h3 id="xpath_float"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#xpath_float">xpath_float</a></h3>
<p>xpath_float(xml, xpath) - Returns a float value, the value zero if no match is found, or NaN if a match is found but the value is non-numeric.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs xml">&gt; SELECT xpath_float('<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>', 'sum(a/b)');
 3.0
</code></pre>

<p><br></p>
<h3 id="xpath_int"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#xpath_int">xpath_int</a></h3>
<p>xpath_int(xml, xpath) - Returns an integer value, or the value zero if no match is found, or a match is found but the value is non-numeric.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs xml">&gt; SELECT xpath_int('<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>', 'sum(a/b)');
 3
</code></pre>

<p><br></p>
<h3 id="xpath_long"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#xpath_long">xpath_long</a></h3>
<p>xpath_long(xml, xpath) - Returns a long integer value, or the value zero if no match is found, or a match is found but the value is non-numeric.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs xml">&gt; SELECT xpath_long('<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>', 'sum(a/b)');
 3
</code></pre>

<p><br></p>
<h3 id="xpath_number"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#xpath_number">xpath_number</a></h3>
<p>xpath_number(xml, xpath) - Returns a double value, the value zero if no match is found, or NaN if a match is found but the value is non-numeric.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs xml">&gt; SELECT xpath_number('<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>', 'sum(a/b)');
 3.0
</code></pre>

<p><br></p>
<h3 id="xpath_short"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#xpath_short">xpath_short</a></h3>
<p>xpath_short(xml, xpath) - Returns a short integer value, or the value zero if no match is found, or a match is found but the value is non-numeric.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs xml">&gt; SELECT xpath_short('<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>', 'sum(a/b)');
 3
</code></pre>

<p><br></p>
<h3 id="xpath_string"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#xpath_string">xpath_string</a></h3>
<p>xpath_string(xml, xpath) - Returns the text contents of the first xml node that matches the XPath expression.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs xml">&gt; SELECT xpath_string('<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>b<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">c</span>&gt;</span>cc<span class="hljs-tag">&lt;/<span class="hljs-name">c</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>','a/c');
 cc
</code></pre>

<p><br></p>
<h3 id="xxhash64"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#xxhash64">xxhash64</a></h3>
<p>xxhash64(expr1, expr2, ...) - Returns a 64-bit hash value of the arguments.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT xxhash64(<span class="hljs-string">'Spark'</span>, array(123), 2);</span>
 5602566077635097486
</code></pre>

<p><strong>Since:</strong> 3.0.0</p>
<p><br></p>
<h3 id="year"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#year">year</a></h3>
<p>year(date) - Returns the year component of the date/timestamp.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT year(<span class="hljs-string">'2016-07-30'</span>);</span>
 2016
</code></pre>

<p><strong>Since:</strong> 1.5.0</p>
<p><br></p>
<h3 id="zip_with"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#zip_with">zip_with</a></h3>
<p>zip_with(left, right, func) - Merges the two given arrays, element-wise, into a single array using function. If one array is shorter, nulls are appended at the end to match the length of the longer array, before applying function.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs coffeescript">&gt; SELECT zip_with(array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), array(<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>), <span class="hljs-function"><span class="hljs-params">(x, y)</span> -&gt;</span> (y, x));
 [{<span class="hljs-string">"y"</span>:<span class="hljs-string">"a"</span>,<span class="hljs-string">"x"</span>:<span class="hljs-number">1</span>},{<span class="hljs-string">"y"</span>:<span class="hljs-string">"b"</span>,<span class="hljs-string">"x"</span>:<span class="hljs-number">2</span>},{<span class="hljs-string">"y"</span>:<span class="hljs-string">"c"</span>,<span class="hljs-string">"x"</span>:<span class="hljs-number">3</span>}]
&gt; SELECT zip_with(array(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), array(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>), <span class="hljs-function"><span class="hljs-params">(x, y)</span> -&gt;</span> x + y);
 [<span class="hljs-number">4</span>,<span class="hljs-number">6</span>]
&gt; SELECT zip_with(array(<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span>), array(<span class="hljs-string">'d'</span>, <span class="hljs-string">'e'</span>, <span class="hljs-string">'f'</span>), <span class="hljs-function"><span class="hljs-params">(x, y)</span> -&gt;</span> concat(x, y));
 [<span class="hljs-string">"ad"</span>,<span class="hljs-string">"be"</span>,<span class="hljs-string">"cf"</span>]
</code></pre>

<p><strong>Since:</strong> 2.4.0</p>
<p><br></p>
<h3 id="_15"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#_15">|</a></h3>
<p>expr1 | expr2 - Returns the result of bitwise OR of <code>expr1</code> and <code>expr2</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT 3 | 5;</span>
 7
</code></pre>

<p><br></p>
<h3 id="_16"><a class="toclink" href="https://spark.apache.org/docs/latest/api/sql/index.html#_16">~</a></h3>
<p>~ expr - Returns the result of bitwise NOT of <code>expr</code>.</p>
<p><strong>Examples:</strong></p>
<pre><code class="hljs shell"><span class="hljs-meta">&gt;</span><span class="bash"> SELECT ~ 0;</span>
 -1
</code></pre>

<p><br></p>
              
            </div>
          </div>
          <footer>
  

  <hr>

  <div role="contentinfo">
    <!-- Copyright etc -->
    
  </div>

  Built with <a href="http://www.mkdocs.org/">MkDocs</a> using a <a href="https://github.com/snide/sphinx_rtd_theme">theme</a> provided by <a href="https://readthedocs.org/">Read the Docs</a>.
</footer>
      
        </div>
      </div>

    </section>

  </div>

  <div class="rst-versions" role="note" style="cursor: pointer">
    <span class="rst-current-version" data-toggle="rst-current-version">
      
      
      
    </span>
</div>
    <script>var base_url = '.';</script>
    <script src="./Functions - Spark SQL, Built-in Functions_files/theme.js" defer=""></script>
      <script src="./Functions - Spark SQL, Built-in Functions_files/main.js" defer=""></script>




<!--
MkDocs version : 1.0.4
Build Date UTC : 2020-06-06 14:00:50
-->
</body></html>